Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> declaraciones
Rule 2     programa -> empty
Rule 3     declaraciones -> declaraciones declaracion
Rule 4     declaraciones -> declaracion
Rule 5     declaracion -> funcion
Rule 6     declaracion -> asignacion_multiple
Rule 7     declaracion -> asignacion_multiple_sin_semicolon
Rule 8     declaracion -> asignacion
Rule 9     declaracion -> asignacion_sin_semicolon
Rule 10    declaracion -> mostrar
Rule 11    declaracion -> condicional
Rule 12    declaracion -> bucle_for
Rule 13    declaracion -> unario
Rule 14    declaracion -> unario_sin_semicolon
Rule 15    declaracion -> bucle_while
Rule 16    declaracion -> llamada_funcion
Rule 17    asignacion -> LET ID ASSIGN expresion SEMICOLON
Rule 18    asignacion -> VAR ID ASSIGN expresion SEMICOLON
Rule 19    asignacion -> CONST ID ASSIGN expresion SEMICOLON
Rule 20    asignacion -> LET ID ASSIGN expresion_array SEMICOLON
Rule 21    asignacion -> CONST ID ASSIGN expresion_array SEMICOLON
Rule 22    asignacion -> VAR ID ASSIGN expresion_array SEMICOLON
Rule 23    asignacion -> LET ID ASSIGN objeto_array SEMICOLON
Rule 24    asignacion -> CONST ID ASSIGN objeto_array SEMICOLON
Rule 25    asignacion -> VAR ID ASSIGN objeto_array SEMICOLON
Rule 26    asignacion_sin_semicolon -> LET ID ASSIGN expresion
Rule 27    asignacion_sin_semicolon -> VAR ID ASSIGN expresion
Rule 28    asignacion_sin_semicolon -> CONST ID ASSIGN expresion
Rule 29    asignacion_sin_semicolon -> LET ID ASSIGN expresion_array
Rule 30    asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array
Rule 31    asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array
Rule 32    asignacion_sin_semicolon -> LET ID ASSIGN objeto_array
Rule 33    asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array
Rule 34    asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array
Rule 35    asignacion_multiple -> LET variables_assign SEMICOLON
Rule 36    asignacion_multiple -> VAR variables_assign SEMICOLON
Rule 37    asignacion_multiple -> CONST variables_assign SEMICOLON
Rule 38    asignacion_multiple_sin_semicolon -> LET variables_assign
Rule 39    asignacion_multiple_sin_semicolon -> VAR variables_assign
Rule 40    asignacion_multiple_sin_semicolon -> CONST variables_assign
Rule 41    variables_assign -> ID
Rule 42    variables_assign -> variables_assign COMMA ID ASSIGN expresion
Rule 43    variables_assign -> variables_assign COMMA ID
Rule 44    mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN
Rule 45    expresion -> valor
Rule 46    expresion -> ID
Rule 47    expresion -> llamada_funcion
Rule 48    expresion_array -> LBRACKET RBRACKET
Rule 49    expresion_array -> LBRACKET elementos RBRACKET
Rule 50    elementos -> expresion
Rule 51    elementos -> elementos COMMA expresion
Rule 52    expresion -> ID LBRACKET NUM RBRACKET
Rule 53    expresion -> ID LBRACKET ID RBRACKET
Rule 54    expresion -> ID PUNTO LENGTH
Rule 55    objeto_array -> LBRACKET LBRACE RBRACE RBRACKET
Rule 56    objeto_array -> LBRACKET objetos RBRACKET
Rule 57    objetos -> objeto
Rule 58    objetos -> objetos COMMA objeto
Rule 59    objeto -> LBRACE propiedades RBRACE
Rule 60    propiedades -> propiedad
Rule 61    propiedades -> propiedades COMMA propiedad
Rule 62    propiedad -> ID COLON valor
Rule 63    expresion -> ID LBRACKET NUM RBRACKET PUNTO ID
Rule 64    expresion -> ID LBRACKET ID RBRACKET PUNTO ID
Rule 65    unario -> ID MINUSMINUS SEMICOLON
Rule 66    unario -> ID PLUSPLUS SEMICOLON
Rule 67    unario -> ID ASSIGN expresion SEMICOLON
Rule 68    unario -> ID PLUSEQ expresion SEMICOLON
Rule 69    unario -> ID MINUSEQ expresion SEMICOLON
Rule 70    unario -> ID TIMESEQ expresion SEMICOLON
Rule 71    unario -> ID DIVEQ expresion SEMICOLON
Rule 72    unario -> ID POWEQ expresion SEMICOLON
Rule 73    unario_sin_semicolon -> ID MINUSMINUS
Rule 74    unario_sin_semicolon -> ID PLUSPLUS
Rule 75    unario_sin_semicolon -> ID ASSIGN expresion
Rule 76    unario_sin_semicolon -> ID PLUSEQ expresion
Rule 77    unario_sin_semicolon -> ID MINUSEQ expresion
Rule 78    unario_sin_semicolon -> ID TIMESEQ expresion
Rule 79    unario_sin_semicolon -> ID DIVEQ expresion
Rule 80    unario_sin_semicolon -> ID POWEQ expresion
Rule 81    expresion -> expresion OPERADOR expresion
Rule 82    valor -> NUM
Rule 83    valor -> STRING
Rule 84    condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
Rule 85    else_block -> ELSE LBRACE declaraciones RBRACE
Rule 86    else_block -> empty
Rule 87    else_if_blocks -> empty
Rule 88    else_if_blocks -> else_if_blocks else_if_block
Rule 89    else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
Rule 90    comparacion -> expresion EQUAL expresion
Rule 91    comparacion -> expresion LESS expresion
Rule 92    comparacion -> expresion GREATER expresion
Rule 93    comparacion -> expresion LESSEQUAL expresion
Rule 94    comparacion -> expresion GREATEQUAL expresion
Rule 95    comparacion -> expresion NOTEQUAL expresion
Rule 96    comparacion -> comparacion OR comparacion
Rule 97    comparacion -> comparacion AND comparacion
Rule 98    bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
Rule 99    bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
Rule 100   funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
Rule 101   parametros -> empty
Rule 102   parametros -> parametro
Rule 103   parametros -> parametros COMMA parametro
Rule 104   parametro -> ID
Rule 105   llamada_funcion -> ID LPAREN argumentos RPAREN
Rule 106   argumentos -> expresion
Rule 107   argumentos -> argumentos COMMA expresion
Rule 108   empty -> <empty>

Terminals, with rules where they appear

AND                  : 97
ASSIGN               : 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 42 67 75
COLON                : 62
COMMA                : 42 43 51 58 61 103 107
CONSOLE              : 44
CONST                : 19 21 24 28 30 33 37 40
DIVEQ                : 71 79
ELSE                 : 85 89
EQUAL                : 90
FOR                  : 98
FUNCTION             : 100
GREATEQUAL           : 94
GREATER              : 92
ID                   : 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 41 42 43 46 52 53 53 54 62 63 63 64 64 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 100 104 105
IF                   : 84 89
LBRACE               : 55 59 84 85 89 98 99 100
LBRACKET             : 48 49 52 53 55 56 63 64
LENGTH               : 54
LESS                 : 91
LESSEQUAL            : 93
LET                  : 17 20 23 26 29 32 35 38
LOG                  : 44
LPAREN               : 44 84 89 98 99 100 105
MINUSEQ              : 69 77
MINUSMINUS           : 65 73
NOTEQUAL             : 95
NUM                  : 52 63 82
OPERADOR             : 81
OR                   : 96
PLUSEQ               : 68 76
PLUSPLUS             : 66 74
POWEQ                : 72 80
PUNTO                : 44 54 63 64
RBRACE               : 55 59 84 85 89 98 99 100
RBRACKET             : 48 49 52 53 55 56 63 64
RPAREN               : 44 84 89 98 99 100 105
SEMICOLON            : 17 18 19 20 21 22 23 24 25 35 36 37 65 66 67 68 69 70 71 72 98
STRING               : 83
TIMESEQ              : 70 78
VAR                  : 18 22 25 27 31 34 36 39
WHILE                : 99
error                : 

Nonterminals, with rules where they appear

argumentos           : 105 107
asignacion           : 8 98
asignacion_multiple  : 6
asignacion_multiple_sin_semicolon : 7
asignacion_sin_semicolon : 9
bucle_for            : 12
bucle_while          : 15
comparacion          : 84 89 96 96 97 97 98 99
condicional          : 11
declaracion          : 3 4
declaraciones        : 1 3 84 85 89 98 99 100
elementos            : 49 51
else_block           : 84
else_if_block        : 88
else_if_blocks       : 84 88
empty                : 2 86 87 101
expresion            : 17 18 19 26 27 28 42 44 50 51 67 68 69 70 71 72 75 76 77 78 79 80 81 81 90 90 91 91 92 92 93 93 94 94 95 95 106 107
expresion_array      : 20 21 22 29 30 31
funcion              : 5
llamada_funcion      : 16 47
mostrar              : 10
objeto               : 57 58
objeto_array         : 23 24 25 32 33 34
objetos              : 56 58
parametro            : 102 103
parametros           : 100 103
programa             : 0
propiedad            : 60 61
propiedades          : 59 61
unario               : 13
unario_sin_semicolon : 14 98
valor                : 45 62
variables_assign     : 35 36 37 38 39 40 42 43

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . declaraciones
    (2) programa -> . empty
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (108) empty -> .
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    $end            reduce using rule 108 (empty -> .)
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    programa                       shift and go to state 1
    declaraciones                  shift and go to state 2
    empty                          shift and go to state 3
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 1

    (0) S' -> programa .



state 2

    (1) programa -> declaraciones .
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    $end            reduce using rule 1 (programa -> declaraciones .)
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 3

    (2) programa -> empty .

    $end            reduce using rule 2 (programa -> empty .)


state 4

    (4) declaraciones -> declaracion .

    FUNCTION        reduce using rule 4 (declaraciones -> declaracion .)
    LET             reduce using rule 4 (declaraciones -> declaracion .)
    VAR             reduce using rule 4 (declaraciones -> declaracion .)
    CONST           reduce using rule 4 (declaraciones -> declaracion .)
    CONSOLE         reduce using rule 4 (declaraciones -> declaracion .)
    IF              reduce using rule 4 (declaraciones -> declaracion .)
    FOR             reduce using rule 4 (declaraciones -> declaracion .)
    ID              reduce using rule 4 (declaraciones -> declaracion .)
    WHILE           reduce using rule 4 (declaraciones -> declaracion .)
    $end            reduce using rule 4 (declaraciones -> declaracion .)
    RBRACE          reduce using rule 4 (declaraciones -> declaracion .)


state 5

    (5) declaracion -> funcion .

    FUNCTION        reduce using rule 5 (declaracion -> funcion .)
    LET             reduce using rule 5 (declaracion -> funcion .)
    VAR             reduce using rule 5 (declaracion -> funcion .)
    CONST           reduce using rule 5 (declaracion -> funcion .)
    CONSOLE         reduce using rule 5 (declaracion -> funcion .)
    IF              reduce using rule 5 (declaracion -> funcion .)
    FOR             reduce using rule 5 (declaracion -> funcion .)
    ID              reduce using rule 5 (declaracion -> funcion .)
    WHILE           reduce using rule 5 (declaracion -> funcion .)
    $end            reduce using rule 5 (declaracion -> funcion .)
    RBRACE          reduce using rule 5 (declaracion -> funcion .)


state 6

    (6) declaracion -> asignacion_multiple .

    FUNCTION        reduce using rule 6 (declaracion -> asignacion_multiple .)
    LET             reduce using rule 6 (declaracion -> asignacion_multiple .)
    VAR             reduce using rule 6 (declaracion -> asignacion_multiple .)
    CONST           reduce using rule 6 (declaracion -> asignacion_multiple .)
    CONSOLE         reduce using rule 6 (declaracion -> asignacion_multiple .)
    IF              reduce using rule 6 (declaracion -> asignacion_multiple .)
    FOR             reduce using rule 6 (declaracion -> asignacion_multiple .)
    ID              reduce using rule 6 (declaracion -> asignacion_multiple .)
    WHILE           reduce using rule 6 (declaracion -> asignacion_multiple .)
    $end            reduce using rule 6 (declaracion -> asignacion_multiple .)
    RBRACE          reduce using rule 6 (declaracion -> asignacion_multiple .)


state 7

    (7) declaracion -> asignacion_multiple_sin_semicolon .

    FUNCTION        reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    LET             reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    VAR             reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    CONST           reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    CONSOLE         reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    IF              reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    FOR             reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    ID              reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    WHILE           reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    $end            reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)
    RBRACE          reduce using rule 7 (declaracion -> asignacion_multiple_sin_semicolon .)


state 8

    (8) declaracion -> asignacion .

    FUNCTION        reduce using rule 8 (declaracion -> asignacion .)
    LET             reduce using rule 8 (declaracion -> asignacion .)
    VAR             reduce using rule 8 (declaracion -> asignacion .)
    CONST           reduce using rule 8 (declaracion -> asignacion .)
    CONSOLE         reduce using rule 8 (declaracion -> asignacion .)
    IF              reduce using rule 8 (declaracion -> asignacion .)
    FOR             reduce using rule 8 (declaracion -> asignacion .)
    ID              reduce using rule 8 (declaracion -> asignacion .)
    WHILE           reduce using rule 8 (declaracion -> asignacion .)
    $end            reduce using rule 8 (declaracion -> asignacion .)
    RBRACE          reduce using rule 8 (declaracion -> asignacion .)


state 9

    (9) declaracion -> asignacion_sin_semicolon .

    FUNCTION        reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    LET             reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    VAR             reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    CONST           reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    CONSOLE         reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    IF              reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    FOR             reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    ID              reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    WHILE           reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    $end            reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)
    RBRACE          reduce using rule 9 (declaracion -> asignacion_sin_semicolon .)


state 10

    (10) declaracion -> mostrar .

    FUNCTION        reduce using rule 10 (declaracion -> mostrar .)
    LET             reduce using rule 10 (declaracion -> mostrar .)
    VAR             reduce using rule 10 (declaracion -> mostrar .)
    CONST           reduce using rule 10 (declaracion -> mostrar .)
    CONSOLE         reduce using rule 10 (declaracion -> mostrar .)
    IF              reduce using rule 10 (declaracion -> mostrar .)
    FOR             reduce using rule 10 (declaracion -> mostrar .)
    ID              reduce using rule 10 (declaracion -> mostrar .)
    WHILE           reduce using rule 10 (declaracion -> mostrar .)
    $end            reduce using rule 10 (declaracion -> mostrar .)
    RBRACE          reduce using rule 10 (declaracion -> mostrar .)


state 11

    (11) declaracion -> condicional .

    FUNCTION        reduce using rule 11 (declaracion -> condicional .)
    LET             reduce using rule 11 (declaracion -> condicional .)
    VAR             reduce using rule 11 (declaracion -> condicional .)
    CONST           reduce using rule 11 (declaracion -> condicional .)
    CONSOLE         reduce using rule 11 (declaracion -> condicional .)
    IF              reduce using rule 11 (declaracion -> condicional .)
    FOR             reduce using rule 11 (declaracion -> condicional .)
    ID              reduce using rule 11 (declaracion -> condicional .)
    WHILE           reduce using rule 11 (declaracion -> condicional .)
    $end            reduce using rule 11 (declaracion -> condicional .)
    RBRACE          reduce using rule 11 (declaracion -> condicional .)


state 12

    (12) declaracion -> bucle_for .

    FUNCTION        reduce using rule 12 (declaracion -> bucle_for .)
    LET             reduce using rule 12 (declaracion -> bucle_for .)
    VAR             reduce using rule 12 (declaracion -> bucle_for .)
    CONST           reduce using rule 12 (declaracion -> bucle_for .)
    CONSOLE         reduce using rule 12 (declaracion -> bucle_for .)
    IF              reduce using rule 12 (declaracion -> bucle_for .)
    FOR             reduce using rule 12 (declaracion -> bucle_for .)
    ID              reduce using rule 12 (declaracion -> bucle_for .)
    WHILE           reduce using rule 12 (declaracion -> bucle_for .)
    $end            reduce using rule 12 (declaracion -> bucle_for .)
    RBRACE          reduce using rule 12 (declaracion -> bucle_for .)


state 13

    (13) declaracion -> unario .

    FUNCTION        reduce using rule 13 (declaracion -> unario .)
    LET             reduce using rule 13 (declaracion -> unario .)
    VAR             reduce using rule 13 (declaracion -> unario .)
    CONST           reduce using rule 13 (declaracion -> unario .)
    CONSOLE         reduce using rule 13 (declaracion -> unario .)
    IF              reduce using rule 13 (declaracion -> unario .)
    FOR             reduce using rule 13 (declaracion -> unario .)
    ID              reduce using rule 13 (declaracion -> unario .)
    WHILE           reduce using rule 13 (declaracion -> unario .)
    $end            reduce using rule 13 (declaracion -> unario .)
    RBRACE          reduce using rule 13 (declaracion -> unario .)


state 14

    (14) declaracion -> unario_sin_semicolon .

    FUNCTION        reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    LET             reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    VAR             reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    CONST           reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    CONSOLE         reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    IF              reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    FOR             reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    ID              reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    WHILE           reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    $end            reduce using rule 14 (declaracion -> unario_sin_semicolon .)
    RBRACE          reduce using rule 14 (declaracion -> unario_sin_semicolon .)


state 15

    (15) declaracion -> bucle_while .

    FUNCTION        reduce using rule 15 (declaracion -> bucle_while .)
    LET             reduce using rule 15 (declaracion -> bucle_while .)
    VAR             reduce using rule 15 (declaracion -> bucle_while .)
    CONST           reduce using rule 15 (declaracion -> bucle_while .)
    CONSOLE         reduce using rule 15 (declaracion -> bucle_while .)
    IF              reduce using rule 15 (declaracion -> bucle_while .)
    FOR             reduce using rule 15 (declaracion -> bucle_while .)
    ID              reduce using rule 15 (declaracion -> bucle_while .)
    WHILE           reduce using rule 15 (declaracion -> bucle_while .)
    $end            reduce using rule 15 (declaracion -> bucle_while .)
    RBRACE          reduce using rule 15 (declaracion -> bucle_while .)


state 16

    (16) declaracion -> llamada_funcion .

    FUNCTION        reduce using rule 16 (declaracion -> llamada_funcion .)
    LET             reduce using rule 16 (declaracion -> llamada_funcion .)
    VAR             reduce using rule 16 (declaracion -> llamada_funcion .)
    CONST           reduce using rule 16 (declaracion -> llamada_funcion .)
    CONSOLE         reduce using rule 16 (declaracion -> llamada_funcion .)
    IF              reduce using rule 16 (declaracion -> llamada_funcion .)
    FOR             reduce using rule 16 (declaracion -> llamada_funcion .)
    ID              reduce using rule 16 (declaracion -> llamada_funcion .)
    WHILE           reduce using rule 16 (declaracion -> llamada_funcion .)
    $end            reduce using rule 16 (declaracion -> llamada_funcion .)
    RBRACE          reduce using rule 16 (declaracion -> llamada_funcion .)


state 17

    (100) funcion -> FUNCTION . ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE

    ID              shift and go to state 27


state 18

    (65) unario -> ID . MINUSMINUS SEMICOLON
    (66) unario -> ID . PLUSPLUS SEMICOLON
    (67) unario -> ID . ASSIGN expresion SEMICOLON
    (68) unario -> ID . PLUSEQ expresion SEMICOLON
    (69) unario -> ID . MINUSEQ expresion SEMICOLON
    (70) unario -> ID . TIMESEQ expresion SEMICOLON
    (71) unario -> ID . DIVEQ expresion SEMICOLON
    (72) unario -> ID . POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> ID . MINUSMINUS
    (74) unario_sin_semicolon -> ID . PLUSPLUS
    (75) unario_sin_semicolon -> ID . ASSIGN expresion
    (76) unario_sin_semicolon -> ID . PLUSEQ expresion
    (77) unario_sin_semicolon -> ID . MINUSEQ expresion
    (78) unario_sin_semicolon -> ID . TIMESEQ expresion
    (79) unario_sin_semicolon -> ID . DIVEQ expresion
    (80) unario_sin_semicolon -> ID . POWEQ expresion
    (105) llamada_funcion -> ID . LPAREN argumentos RPAREN

    MINUSMINUS      shift and go to state 28
    PLUSPLUS        shift and go to state 29
    ASSIGN          shift and go to state 30
    PLUSEQ          shift and go to state 31
    MINUSEQ         shift and go to state 32
    TIMESEQ         shift and go to state 33
    DIVEQ           shift and go to state 34
    POWEQ           shift and go to state 35
    LPAREN          shift and go to state 36


state 19

    (35) asignacion_multiple -> LET . variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> LET . variables_assign
    (17) asignacion -> LET . ID ASSIGN expresion SEMICOLON
    (20) asignacion -> LET . ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> LET . ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> LET . ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> LET . ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> LET . ID ASSIGN objeto_array
    (41) variables_assign -> . ID
    (42) variables_assign -> . variables_assign COMMA ID ASSIGN expresion
    (43) variables_assign -> . variables_assign COMMA ID

    ID              shift and go to state 38

    variables_assign               shift and go to state 37

state 20

    (36) asignacion_multiple -> VAR . variables_assign SEMICOLON
    (39) asignacion_multiple_sin_semicolon -> VAR . variables_assign
    (18) asignacion -> VAR . ID ASSIGN expresion SEMICOLON
    (22) asignacion -> VAR . ID ASSIGN expresion_array SEMICOLON
    (25) asignacion -> VAR . ID ASSIGN objeto_array SEMICOLON
    (27) asignacion_sin_semicolon -> VAR . ID ASSIGN expresion
    (31) asignacion_sin_semicolon -> VAR . ID ASSIGN expresion_array
    (34) asignacion_sin_semicolon -> VAR . ID ASSIGN objeto_array
    (41) variables_assign -> . ID
    (42) variables_assign -> . variables_assign COMMA ID ASSIGN expresion
    (43) variables_assign -> . variables_assign COMMA ID

    ID              shift and go to state 40

    variables_assign               shift and go to state 39

state 21

    (37) asignacion_multiple -> CONST . variables_assign SEMICOLON
    (40) asignacion_multiple_sin_semicolon -> CONST . variables_assign
    (19) asignacion -> CONST . ID ASSIGN expresion SEMICOLON
    (21) asignacion -> CONST . ID ASSIGN expresion_array SEMICOLON
    (24) asignacion -> CONST . ID ASSIGN objeto_array SEMICOLON
    (28) asignacion_sin_semicolon -> CONST . ID ASSIGN expresion
    (30) asignacion_sin_semicolon -> CONST . ID ASSIGN expresion_array
    (33) asignacion_sin_semicolon -> CONST . ID ASSIGN objeto_array
    (41) variables_assign -> . ID
    (42) variables_assign -> . variables_assign COMMA ID ASSIGN expresion
    (43) variables_assign -> . variables_assign COMMA ID

    ID              shift and go to state 42

    variables_assign               shift and go to state 41

state 22

    (44) mostrar -> CONSOLE . PUNTO LOG LPAREN expresion RPAREN

    PUNTO           shift and go to state 43


state 23

    (84) condicional -> IF . LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block

    LPAREN          shift and go to state 44


state 24

    (98) bucle_for -> FOR . LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE

    LPAREN          shift and go to state 45


state 25

    (99) bucle_while -> WHILE . LPAREN comparacion RPAREN LBRACE declaraciones RBRACE

    LPAREN          shift and go to state 46


state 26

    (3) declaraciones -> declaraciones declaracion .

    FUNCTION        reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    LET             reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    VAR             reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    CONST           reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    CONSOLE         reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    IF              reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    FOR             reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    ID              reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    WHILE           reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    $end            reduce using rule 3 (declaraciones -> declaraciones declaracion .)
    RBRACE          reduce using rule 3 (declaraciones -> declaraciones declaracion .)


state 27

    (100) funcion -> FUNCTION ID . LPAREN parametros RPAREN LBRACE declaraciones RBRACE

    LPAREN          shift and go to state 47


state 28

    (65) unario -> ID MINUSMINUS . SEMICOLON
    (73) unario_sin_semicolon -> ID MINUSMINUS .

    SEMICOLON       shift and go to state 48
    FUNCTION        reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    LET             reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    VAR             reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    CONST           reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    CONSOLE         reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    IF              reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    FOR             reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    ID              reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    WHILE           reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    $end            reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)
    RBRACE          reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)


state 29

    (66) unario -> ID PLUSPLUS . SEMICOLON
    (74) unario_sin_semicolon -> ID PLUSPLUS .

    SEMICOLON       shift and go to state 49
    FUNCTION        reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    LET             reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    VAR             reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    CONST           reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    CONSOLE         reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    IF              reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    FOR             reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    ID              reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    WHILE           reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    $end            reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)
    RBRACE          reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)


state 30

    (67) unario -> ID ASSIGN . expresion SEMICOLON
    (75) unario_sin_semicolon -> ID ASSIGN . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 51
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 31

    (68) unario -> ID PLUSEQ . expresion SEMICOLON
    (76) unario_sin_semicolon -> ID PLUSEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 56
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 32

    (69) unario -> ID MINUSEQ . expresion SEMICOLON
    (77) unario_sin_semicolon -> ID MINUSEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 57
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 33

    (70) unario -> ID TIMESEQ . expresion SEMICOLON
    (78) unario_sin_semicolon -> ID TIMESEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 58
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 34

    (71) unario -> ID DIVEQ . expresion SEMICOLON
    (79) unario_sin_semicolon -> ID DIVEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 59
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 35

    (72) unario -> ID POWEQ . expresion SEMICOLON
    (80) unario_sin_semicolon -> ID POWEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 60
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 36

    (105) llamada_funcion -> ID LPAREN . argumentos RPAREN
    (106) argumentos -> . expresion
    (107) argumentos -> . argumentos COMMA expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    argumentos                     shift and go to state 61
    expresion                      shift and go to state 62
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 37

    (35) asignacion_multiple -> LET variables_assign . SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> LET variables_assign .
    (42) variables_assign -> variables_assign . COMMA ID ASSIGN expresion
    (43) variables_assign -> variables_assign . COMMA ID

    SEMICOLON       shift and go to state 63
    FUNCTION        reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    LET             reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    VAR             reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    CONST           reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    CONSOLE         reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    IF              reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    FOR             reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    ID              reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    WHILE           reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    $end            reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    RBRACE          reduce using rule 38 (asignacion_multiple_sin_semicolon -> LET variables_assign .)
    COMMA           shift and go to state 64


state 38

    (17) asignacion -> LET ID . ASSIGN expresion SEMICOLON
    (20) asignacion -> LET ID . ASSIGN expresion_array SEMICOLON
    (23) asignacion -> LET ID . ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> LET ID . ASSIGN expresion
    (29) asignacion_sin_semicolon -> LET ID . ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> LET ID . ASSIGN objeto_array
    (41) variables_assign -> ID .

    ASSIGN          shift and go to state 65
    SEMICOLON       reduce using rule 41 (variables_assign -> ID .)
    COMMA           reduce using rule 41 (variables_assign -> ID .)
    FUNCTION        reduce using rule 41 (variables_assign -> ID .)
    LET             reduce using rule 41 (variables_assign -> ID .)
    VAR             reduce using rule 41 (variables_assign -> ID .)
    CONST           reduce using rule 41 (variables_assign -> ID .)
    CONSOLE         reduce using rule 41 (variables_assign -> ID .)
    IF              reduce using rule 41 (variables_assign -> ID .)
    FOR             reduce using rule 41 (variables_assign -> ID .)
    ID              reduce using rule 41 (variables_assign -> ID .)
    WHILE           reduce using rule 41 (variables_assign -> ID .)
    $end            reduce using rule 41 (variables_assign -> ID .)
    RBRACE          reduce using rule 41 (variables_assign -> ID .)


state 39

    (36) asignacion_multiple -> VAR variables_assign . SEMICOLON
    (39) asignacion_multiple_sin_semicolon -> VAR variables_assign .
    (42) variables_assign -> variables_assign . COMMA ID ASSIGN expresion
    (43) variables_assign -> variables_assign . COMMA ID

    SEMICOLON       shift and go to state 66
    FUNCTION        reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    LET             reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    VAR             reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    CONST           reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    CONSOLE         reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    IF              reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    FOR             reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    ID              reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    WHILE           reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    $end            reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    RBRACE          reduce using rule 39 (asignacion_multiple_sin_semicolon -> VAR variables_assign .)
    COMMA           shift and go to state 64


state 40

    (18) asignacion -> VAR ID . ASSIGN expresion SEMICOLON
    (22) asignacion -> VAR ID . ASSIGN expresion_array SEMICOLON
    (25) asignacion -> VAR ID . ASSIGN objeto_array SEMICOLON
    (27) asignacion_sin_semicolon -> VAR ID . ASSIGN expresion
    (31) asignacion_sin_semicolon -> VAR ID . ASSIGN expresion_array
    (34) asignacion_sin_semicolon -> VAR ID . ASSIGN objeto_array
    (41) variables_assign -> ID .

    ASSIGN          shift and go to state 67
    SEMICOLON       reduce using rule 41 (variables_assign -> ID .)
    COMMA           reduce using rule 41 (variables_assign -> ID .)
    FUNCTION        reduce using rule 41 (variables_assign -> ID .)
    LET             reduce using rule 41 (variables_assign -> ID .)
    VAR             reduce using rule 41 (variables_assign -> ID .)
    CONST           reduce using rule 41 (variables_assign -> ID .)
    CONSOLE         reduce using rule 41 (variables_assign -> ID .)
    IF              reduce using rule 41 (variables_assign -> ID .)
    FOR             reduce using rule 41 (variables_assign -> ID .)
    ID              reduce using rule 41 (variables_assign -> ID .)
    WHILE           reduce using rule 41 (variables_assign -> ID .)
    $end            reduce using rule 41 (variables_assign -> ID .)
    RBRACE          reduce using rule 41 (variables_assign -> ID .)


state 41

    (37) asignacion_multiple -> CONST variables_assign . SEMICOLON
    (40) asignacion_multiple_sin_semicolon -> CONST variables_assign .
    (42) variables_assign -> variables_assign . COMMA ID ASSIGN expresion
    (43) variables_assign -> variables_assign . COMMA ID

    SEMICOLON       shift and go to state 68
    FUNCTION        reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    LET             reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    VAR             reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    CONST           reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    CONSOLE         reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    IF              reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    FOR             reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    ID              reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    WHILE           reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    $end            reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    RBRACE          reduce using rule 40 (asignacion_multiple_sin_semicolon -> CONST variables_assign .)
    COMMA           shift and go to state 64


state 42

    (19) asignacion -> CONST ID . ASSIGN expresion SEMICOLON
    (21) asignacion -> CONST ID . ASSIGN expresion_array SEMICOLON
    (24) asignacion -> CONST ID . ASSIGN objeto_array SEMICOLON
    (28) asignacion_sin_semicolon -> CONST ID . ASSIGN expresion
    (30) asignacion_sin_semicolon -> CONST ID . ASSIGN expresion_array
    (33) asignacion_sin_semicolon -> CONST ID . ASSIGN objeto_array
    (41) variables_assign -> ID .

    ASSIGN          shift and go to state 69
    SEMICOLON       reduce using rule 41 (variables_assign -> ID .)
    COMMA           reduce using rule 41 (variables_assign -> ID .)
    FUNCTION        reduce using rule 41 (variables_assign -> ID .)
    LET             reduce using rule 41 (variables_assign -> ID .)
    VAR             reduce using rule 41 (variables_assign -> ID .)
    CONST           reduce using rule 41 (variables_assign -> ID .)
    CONSOLE         reduce using rule 41 (variables_assign -> ID .)
    IF              reduce using rule 41 (variables_assign -> ID .)
    FOR             reduce using rule 41 (variables_assign -> ID .)
    ID              reduce using rule 41 (variables_assign -> ID .)
    WHILE           reduce using rule 41 (variables_assign -> ID .)
    $end            reduce using rule 41 (variables_assign -> ID .)
    RBRACE          reduce using rule 41 (variables_assign -> ID .)


state 43

    (44) mostrar -> CONSOLE PUNTO . LOG LPAREN expresion RPAREN

    LOG             shift and go to state 70


state 44

    (84) condicional -> IF LPAREN . comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (90) comparacion -> . expresion EQUAL expresion
    (91) comparacion -> . expresion LESS expresion
    (92) comparacion -> . expresion GREATER expresion
    (93) comparacion -> . expresion LESSEQUAL expresion
    (94) comparacion -> . expresion GREATEQUAL expresion
    (95) comparacion -> . expresion NOTEQUAL expresion
    (96) comparacion -> . comparacion OR comparacion
    (97) comparacion -> . comparacion AND comparacion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    comparacion                    shift and go to state 71
    expresion                      shift and go to state 72
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 45

    (98) bucle_for -> FOR LPAREN . asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON

    LET             shift and go to state 74
    VAR             shift and go to state 75
    CONST           shift and go to state 76

    asignacion                     shift and go to state 73

state 46

    (99) bucle_while -> WHILE LPAREN . comparacion RPAREN LBRACE declaraciones RBRACE
    (90) comparacion -> . expresion EQUAL expresion
    (91) comparacion -> . expresion LESS expresion
    (92) comparacion -> . expresion GREATER expresion
    (93) comparacion -> . expresion LESSEQUAL expresion
    (94) comparacion -> . expresion GREATEQUAL expresion
    (95) comparacion -> . expresion NOTEQUAL expresion
    (96) comparacion -> . comparacion OR comparacion
    (97) comparacion -> . comparacion AND comparacion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    comparacion                    shift and go to state 77
    expresion                      shift and go to state 72
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 47

    (100) funcion -> FUNCTION ID LPAREN . parametros RPAREN LBRACE declaraciones RBRACE
    (101) parametros -> . empty
    (102) parametros -> . parametro
    (103) parametros -> . parametros COMMA parametro
    (108) empty -> .
    (104) parametro -> . ID

    RPAREN          reduce using rule 108 (empty -> .)
    COMMA           reduce using rule 108 (empty -> .)
    ID              shift and go to state 78

    parametros                     shift and go to state 79
    empty                          shift and go to state 80
    parametro                      shift and go to state 81

state 48

    (65) unario -> ID MINUSMINUS SEMICOLON .

    FUNCTION        reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    LET             reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    VAR             reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    CONST           reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    CONSOLE         reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    IF              reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    FOR             reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    ID              reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    WHILE           reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    $end            reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)
    RBRACE          reduce using rule 65 (unario -> ID MINUSMINUS SEMICOLON .)


state 49

    (66) unario -> ID PLUSPLUS SEMICOLON .

    FUNCTION        reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    LET             reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    VAR             reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    CONST           reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    CONSOLE         reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    IF              reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    FOR             reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    ID              reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    WHILE           reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    $end            reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)
    RBRACE          reduce using rule 66 (unario -> ID PLUSPLUS SEMICOLON .)


state 50

    (46) expresion -> ID .
    (52) expresion -> ID . LBRACKET NUM RBRACKET
    (53) expresion -> ID . LBRACKET ID RBRACKET
    (54) expresion -> ID . PUNTO LENGTH
    (63) expresion -> ID . LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> ID . LBRACKET ID RBRACKET PUNTO ID
    (105) llamada_funcion -> ID . LPAREN argumentos RPAREN

    SEMICOLON       reduce using rule 46 (expresion -> ID .)
    OPERADOR        reduce using rule 46 (expresion -> ID .)
    FUNCTION        reduce using rule 46 (expresion -> ID .)
    LET             reduce using rule 46 (expresion -> ID .)
    VAR             reduce using rule 46 (expresion -> ID .)
    CONST           reduce using rule 46 (expresion -> ID .)
    CONSOLE         reduce using rule 46 (expresion -> ID .)
    IF              reduce using rule 46 (expresion -> ID .)
    FOR             reduce using rule 46 (expresion -> ID .)
    ID              reduce using rule 46 (expresion -> ID .)
    WHILE           reduce using rule 46 (expresion -> ID .)
    $end            reduce using rule 46 (expresion -> ID .)
    RBRACE          reduce using rule 46 (expresion -> ID .)
    RPAREN          reduce using rule 46 (expresion -> ID .)
    COMMA           reduce using rule 46 (expresion -> ID .)
    EQUAL           reduce using rule 46 (expresion -> ID .)
    LESS            reduce using rule 46 (expresion -> ID .)
    GREATER         reduce using rule 46 (expresion -> ID .)
    LESSEQUAL       reduce using rule 46 (expresion -> ID .)
    GREATEQUAL      reduce using rule 46 (expresion -> ID .)
    NOTEQUAL        reduce using rule 46 (expresion -> ID .)
    RBRACKET        reduce using rule 46 (expresion -> ID .)
    OR              reduce using rule 46 (expresion -> ID .)
    AND             reduce using rule 46 (expresion -> ID .)
    LBRACKET        shift and go to state 82
    PUNTO           shift and go to state 83
    LPAREN          shift and go to state 36


state 51

    (67) unario -> ID ASSIGN expresion . SEMICOLON
    (75) unario_sin_semicolon -> ID ASSIGN expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 84
    FUNCTION        reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    LET             reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    VAR             reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    CONST           reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    CONSOLE         reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    IF              reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    FOR             reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    ID              reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    WHILE           reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    $end            reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    RBRACE          reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    OPERADOR        shift and go to state 85


state 52

    (45) expresion -> valor .

    SEMICOLON       reduce using rule 45 (expresion -> valor .)
    OPERADOR        reduce using rule 45 (expresion -> valor .)
    FUNCTION        reduce using rule 45 (expresion -> valor .)
    LET             reduce using rule 45 (expresion -> valor .)
    VAR             reduce using rule 45 (expresion -> valor .)
    CONST           reduce using rule 45 (expresion -> valor .)
    CONSOLE         reduce using rule 45 (expresion -> valor .)
    IF              reduce using rule 45 (expresion -> valor .)
    FOR             reduce using rule 45 (expresion -> valor .)
    ID              reduce using rule 45 (expresion -> valor .)
    WHILE           reduce using rule 45 (expresion -> valor .)
    $end            reduce using rule 45 (expresion -> valor .)
    RBRACE          reduce using rule 45 (expresion -> valor .)
    RPAREN          reduce using rule 45 (expresion -> valor .)
    COMMA           reduce using rule 45 (expresion -> valor .)
    EQUAL           reduce using rule 45 (expresion -> valor .)
    LESS            reduce using rule 45 (expresion -> valor .)
    GREATER         reduce using rule 45 (expresion -> valor .)
    LESSEQUAL       reduce using rule 45 (expresion -> valor .)
    GREATEQUAL      reduce using rule 45 (expresion -> valor .)
    NOTEQUAL        reduce using rule 45 (expresion -> valor .)
    RBRACKET        reduce using rule 45 (expresion -> valor .)
    OR              reduce using rule 45 (expresion -> valor .)
    AND             reduce using rule 45 (expresion -> valor .)


state 53

    (47) expresion -> llamada_funcion .

    SEMICOLON       reduce using rule 47 (expresion -> llamada_funcion .)
    OPERADOR        reduce using rule 47 (expresion -> llamada_funcion .)
    FUNCTION        reduce using rule 47 (expresion -> llamada_funcion .)
    LET             reduce using rule 47 (expresion -> llamada_funcion .)
    VAR             reduce using rule 47 (expresion -> llamada_funcion .)
    CONST           reduce using rule 47 (expresion -> llamada_funcion .)
    CONSOLE         reduce using rule 47 (expresion -> llamada_funcion .)
    IF              reduce using rule 47 (expresion -> llamada_funcion .)
    FOR             reduce using rule 47 (expresion -> llamada_funcion .)
    ID              reduce using rule 47 (expresion -> llamada_funcion .)
    WHILE           reduce using rule 47 (expresion -> llamada_funcion .)
    $end            reduce using rule 47 (expresion -> llamada_funcion .)
    RBRACE          reduce using rule 47 (expresion -> llamada_funcion .)
    RPAREN          reduce using rule 47 (expresion -> llamada_funcion .)
    COMMA           reduce using rule 47 (expresion -> llamada_funcion .)
    EQUAL           reduce using rule 47 (expresion -> llamada_funcion .)
    LESS            reduce using rule 47 (expresion -> llamada_funcion .)
    GREATER         reduce using rule 47 (expresion -> llamada_funcion .)
    LESSEQUAL       reduce using rule 47 (expresion -> llamada_funcion .)
    GREATEQUAL      reduce using rule 47 (expresion -> llamada_funcion .)
    NOTEQUAL        reduce using rule 47 (expresion -> llamada_funcion .)
    RBRACKET        reduce using rule 47 (expresion -> llamada_funcion .)
    OR              reduce using rule 47 (expresion -> llamada_funcion .)
    AND             reduce using rule 47 (expresion -> llamada_funcion .)


state 54

    (82) valor -> NUM .

    SEMICOLON       reduce using rule 82 (valor -> NUM .)
    OPERADOR        reduce using rule 82 (valor -> NUM .)
    FUNCTION        reduce using rule 82 (valor -> NUM .)
    LET             reduce using rule 82 (valor -> NUM .)
    VAR             reduce using rule 82 (valor -> NUM .)
    CONST           reduce using rule 82 (valor -> NUM .)
    CONSOLE         reduce using rule 82 (valor -> NUM .)
    IF              reduce using rule 82 (valor -> NUM .)
    FOR             reduce using rule 82 (valor -> NUM .)
    ID              reduce using rule 82 (valor -> NUM .)
    WHILE           reduce using rule 82 (valor -> NUM .)
    $end            reduce using rule 82 (valor -> NUM .)
    RBRACE          reduce using rule 82 (valor -> NUM .)
    RPAREN          reduce using rule 82 (valor -> NUM .)
    COMMA           reduce using rule 82 (valor -> NUM .)
    EQUAL           reduce using rule 82 (valor -> NUM .)
    LESS            reduce using rule 82 (valor -> NUM .)
    GREATER         reduce using rule 82 (valor -> NUM .)
    LESSEQUAL       reduce using rule 82 (valor -> NUM .)
    GREATEQUAL      reduce using rule 82 (valor -> NUM .)
    NOTEQUAL        reduce using rule 82 (valor -> NUM .)
    RBRACKET        reduce using rule 82 (valor -> NUM .)
    OR              reduce using rule 82 (valor -> NUM .)
    AND             reduce using rule 82 (valor -> NUM .)


state 55

    (83) valor -> STRING .

    SEMICOLON       reduce using rule 83 (valor -> STRING .)
    OPERADOR        reduce using rule 83 (valor -> STRING .)
    FUNCTION        reduce using rule 83 (valor -> STRING .)
    LET             reduce using rule 83 (valor -> STRING .)
    VAR             reduce using rule 83 (valor -> STRING .)
    CONST           reduce using rule 83 (valor -> STRING .)
    CONSOLE         reduce using rule 83 (valor -> STRING .)
    IF              reduce using rule 83 (valor -> STRING .)
    FOR             reduce using rule 83 (valor -> STRING .)
    ID              reduce using rule 83 (valor -> STRING .)
    WHILE           reduce using rule 83 (valor -> STRING .)
    $end            reduce using rule 83 (valor -> STRING .)
    RBRACE          reduce using rule 83 (valor -> STRING .)
    RPAREN          reduce using rule 83 (valor -> STRING .)
    COMMA           reduce using rule 83 (valor -> STRING .)
    EQUAL           reduce using rule 83 (valor -> STRING .)
    LESS            reduce using rule 83 (valor -> STRING .)
    GREATER         reduce using rule 83 (valor -> STRING .)
    LESSEQUAL       reduce using rule 83 (valor -> STRING .)
    GREATEQUAL      reduce using rule 83 (valor -> STRING .)
    NOTEQUAL        reduce using rule 83 (valor -> STRING .)
    RBRACKET        reduce using rule 83 (valor -> STRING .)
    OR              reduce using rule 83 (valor -> STRING .)
    AND             reduce using rule 83 (valor -> STRING .)


state 56

    (68) unario -> ID PLUSEQ expresion . SEMICOLON
    (76) unario_sin_semicolon -> ID PLUSEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 86
    FUNCTION        reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    LET             reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    VAR             reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    CONST           reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    CONSOLE         reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    IF              reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    FOR             reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    ID              reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    WHILE           reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    $end            reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    RBRACE          reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    OPERADOR        shift and go to state 85


state 57

    (69) unario -> ID MINUSEQ expresion . SEMICOLON
    (77) unario_sin_semicolon -> ID MINUSEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 87
    FUNCTION        reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    LET             reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    VAR             reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    CONST           reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    CONSOLE         reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    IF              reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    FOR             reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    ID              reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    WHILE           reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    $end            reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    RBRACE          reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    OPERADOR        shift and go to state 85


state 58

    (70) unario -> ID TIMESEQ expresion . SEMICOLON
    (78) unario_sin_semicolon -> ID TIMESEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 88
    FUNCTION        reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    LET             reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    VAR             reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    CONST           reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    CONSOLE         reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    IF              reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    FOR             reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    ID              reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    WHILE           reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    $end            reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    RBRACE          reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    OPERADOR        shift and go to state 85


state 59

    (71) unario -> ID DIVEQ expresion . SEMICOLON
    (79) unario_sin_semicolon -> ID DIVEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 89
    FUNCTION        reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    LET             reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    VAR             reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    CONST           reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    CONSOLE         reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    IF              reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    FOR             reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    ID              reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    WHILE           reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    $end            reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    RBRACE          reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    OPERADOR        shift and go to state 85


state 60

    (72) unario -> ID POWEQ expresion . SEMICOLON
    (80) unario_sin_semicolon -> ID POWEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 90
    FUNCTION        reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    LET             reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    VAR             reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    CONST           reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    CONSOLE         reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    IF              reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    FOR             reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    ID              reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    WHILE           reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    $end            reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    RBRACE          reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    OPERADOR        shift and go to state 85


state 61

    (105) llamada_funcion -> ID LPAREN argumentos . RPAREN
    (107) argumentos -> argumentos . COMMA expresion

    RPAREN          shift and go to state 91
    COMMA           shift and go to state 92


state 62

    (106) argumentos -> expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 106 (argumentos -> expresion .)
    COMMA           reduce using rule 106 (argumentos -> expresion .)
    OPERADOR        shift and go to state 85


state 63

    (35) asignacion_multiple -> LET variables_assign SEMICOLON .

    FUNCTION        reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    LET             reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    VAR             reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    CONST           reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    CONSOLE         reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    IF              reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    FOR             reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    ID              reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    WHILE           reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    $end            reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)
    RBRACE          reduce using rule 35 (asignacion_multiple -> LET variables_assign SEMICOLON .)


state 64

    (42) variables_assign -> variables_assign COMMA . ID ASSIGN expresion
    (43) variables_assign -> variables_assign COMMA . ID

    ID              shift and go to state 93


state 65

    (17) asignacion -> LET ID ASSIGN . expresion SEMICOLON
    (20) asignacion -> LET ID ASSIGN . expresion_array SEMICOLON
    (23) asignacion -> LET ID ASSIGN . objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> LET ID ASSIGN . expresion
    (29) asignacion_sin_semicolon -> LET ID ASSIGN . expresion_array
    (32) asignacion_sin_semicolon -> LET ID ASSIGN . objeto_array
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (48) expresion_array -> . LBRACKET RBRACKET
    (49) expresion_array -> . LBRACKET elementos RBRACKET
    (55) objeto_array -> . LBRACKET LBRACE RBRACE RBRACKET
    (56) objeto_array -> . LBRACKET objetos RBRACKET
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    LBRACKET        shift and go to state 97
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 94
    expresion_array                shift and go to state 95
    objeto_array                   shift and go to state 96
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 66

    (36) asignacion_multiple -> VAR variables_assign SEMICOLON .

    FUNCTION        reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    LET             reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    VAR             reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    CONST           reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    CONSOLE         reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    IF              reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    FOR             reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    ID              reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    WHILE           reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    $end            reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)
    RBRACE          reduce using rule 36 (asignacion_multiple -> VAR variables_assign SEMICOLON .)


state 67

    (18) asignacion -> VAR ID ASSIGN . expresion SEMICOLON
    (22) asignacion -> VAR ID ASSIGN . expresion_array SEMICOLON
    (25) asignacion -> VAR ID ASSIGN . objeto_array SEMICOLON
    (27) asignacion_sin_semicolon -> VAR ID ASSIGN . expresion
    (31) asignacion_sin_semicolon -> VAR ID ASSIGN . expresion_array
    (34) asignacion_sin_semicolon -> VAR ID ASSIGN . objeto_array
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (48) expresion_array -> . LBRACKET RBRACKET
    (49) expresion_array -> . LBRACKET elementos RBRACKET
    (55) objeto_array -> . LBRACKET LBRACE RBRACE RBRACKET
    (56) objeto_array -> . LBRACKET objetos RBRACKET
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    LBRACKET        shift and go to state 97
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 98
    expresion_array                shift and go to state 99
    objeto_array                   shift and go to state 100
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 68

    (37) asignacion_multiple -> CONST variables_assign SEMICOLON .

    FUNCTION        reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    LET             reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    VAR             reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    CONST           reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    CONSOLE         reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    IF              reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    FOR             reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    ID              reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    WHILE           reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    $end            reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)
    RBRACE          reduce using rule 37 (asignacion_multiple -> CONST variables_assign SEMICOLON .)


state 69

    (19) asignacion -> CONST ID ASSIGN . expresion SEMICOLON
    (21) asignacion -> CONST ID ASSIGN . expresion_array SEMICOLON
    (24) asignacion -> CONST ID ASSIGN . objeto_array SEMICOLON
    (28) asignacion_sin_semicolon -> CONST ID ASSIGN . expresion
    (30) asignacion_sin_semicolon -> CONST ID ASSIGN . expresion_array
    (33) asignacion_sin_semicolon -> CONST ID ASSIGN . objeto_array
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (48) expresion_array -> . LBRACKET RBRACKET
    (49) expresion_array -> . LBRACKET elementos RBRACKET
    (55) objeto_array -> . LBRACKET LBRACE RBRACE RBRACKET
    (56) objeto_array -> . LBRACKET objetos RBRACKET
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    LBRACKET        shift and go to state 97
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 101
    expresion_array                shift and go to state 102
    objeto_array                   shift and go to state 103
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 70

    (44) mostrar -> CONSOLE PUNTO LOG . LPAREN expresion RPAREN

    LPAREN          shift and go to state 104


state 71

    (84) condicional -> IF LPAREN comparacion . RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (96) comparacion -> comparacion . OR comparacion
    (97) comparacion -> comparacion . AND comparacion

    RPAREN          shift and go to state 105
    OR              shift and go to state 106
    AND             shift and go to state 107


state 72

    (90) comparacion -> expresion . EQUAL expresion
    (91) comparacion -> expresion . LESS expresion
    (92) comparacion -> expresion . GREATER expresion
    (93) comparacion -> expresion . LESSEQUAL expresion
    (94) comparacion -> expresion . GREATEQUAL expresion
    (95) comparacion -> expresion . NOTEQUAL expresion
    (81) expresion -> expresion . OPERADOR expresion

    EQUAL           shift and go to state 108
    LESS            shift and go to state 109
    GREATER         shift and go to state 110
    LESSEQUAL       shift and go to state 111
    GREATEQUAL      shift and go to state 112
    NOTEQUAL        shift and go to state 113
    OPERADOR        shift and go to state 85


state 73

    (98) bucle_for -> FOR LPAREN asignacion . comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (90) comparacion -> . expresion EQUAL expresion
    (91) comparacion -> . expresion LESS expresion
    (92) comparacion -> . expresion GREATER expresion
    (93) comparacion -> . expresion LESSEQUAL expresion
    (94) comparacion -> . expresion GREATEQUAL expresion
    (95) comparacion -> . expresion NOTEQUAL expresion
    (96) comparacion -> . comparacion OR comparacion
    (97) comparacion -> . comparacion AND comparacion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    comparacion                    shift and go to state 114
    expresion                      shift and go to state 72
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 74

    (17) asignacion -> LET . ID ASSIGN expresion SEMICOLON
    (20) asignacion -> LET . ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> LET . ID ASSIGN objeto_array SEMICOLON

    ID              shift and go to state 115


state 75

    (18) asignacion -> VAR . ID ASSIGN expresion SEMICOLON
    (22) asignacion -> VAR . ID ASSIGN expresion_array SEMICOLON
    (25) asignacion -> VAR . ID ASSIGN objeto_array SEMICOLON

    ID              shift and go to state 116


state 76

    (19) asignacion -> CONST . ID ASSIGN expresion SEMICOLON
    (21) asignacion -> CONST . ID ASSIGN expresion_array SEMICOLON
    (24) asignacion -> CONST . ID ASSIGN objeto_array SEMICOLON

    ID              shift and go to state 117


state 77

    (99) bucle_while -> WHILE LPAREN comparacion . RPAREN LBRACE declaraciones RBRACE
    (96) comparacion -> comparacion . OR comparacion
    (97) comparacion -> comparacion . AND comparacion

    RPAREN          shift and go to state 118
    OR              shift and go to state 106
    AND             shift and go to state 107


state 78

    (104) parametro -> ID .

    RPAREN          reduce using rule 104 (parametro -> ID .)
    COMMA           reduce using rule 104 (parametro -> ID .)


state 79

    (100) funcion -> FUNCTION ID LPAREN parametros . RPAREN LBRACE declaraciones RBRACE
    (103) parametros -> parametros . COMMA parametro

    RPAREN          shift and go to state 119
    COMMA           shift and go to state 120


state 80

    (101) parametros -> empty .

    RPAREN          reduce using rule 101 (parametros -> empty .)
    COMMA           reduce using rule 101 (parametros -> empty .)


state 81

    (102) parametros -> parametro .

    RPAREN          reduce using rule 102 (parametros -> parametro .)
    COMMA           reduce using rule 102 (parametros -> parametro .)


state 82

    (52) expresion -> ID LBRACKET . NUM RBRACKET
    (53) expresion -> ID LBRACKET . ID RBRACKET
    (63) expresion -> ID LBRACKET . NUM RBRACKET PUNTO ID
    (64) expresion -> ID LBRACKET . ID RBRACKET PUNTO ID

    NUM             shift and go to state 122
    ID              shift and go to state 121


state 83

    (54) expresion -> ID PUNTO . LENGTH

    LENGTH          shift and go to state 123


state 84

    (67) unario -> ID ASSIGN expresion SEMICOLON .

    FUNCTION        reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    LET             reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    VAR             reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    CONST           reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    CONSOLE         reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    IF              reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    FOR             reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    ID              reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    WHILE           reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    $end            reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 67 (unario -> ID ASSIGN expresion SEMICOLON .)


state 85

    (81) expresion -> expresion OPERADOR . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 124
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 86

    (68) unario -> ID PLUSEQ expresion SEMICOLON .

    FUNCTION        reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    LET             reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    VAR             reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    CONST           reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    CONSOLE         reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    IF              reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    FOR             reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    ID              reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    WHILE           reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    $end            reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)
    RBRACE          reduce using rule 68 (unario -> ID PLUSEQ expresion SEMICOLON .)


state 87

    (69) unario -> ID MINUSEQ expresion SEMICOLON .

    FUNCTION        reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    LET             reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    VAR             reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    CONST           reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    CONSOLE         reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    IF              reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    FOR             reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    ID              reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    WHILE           reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    $end            reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)
    RBRACE          reduce using rule 69 (unario -> ID MINUSEQ expresion SEMICOLON .)


state 88

    (70) unario -> ID TIMESEQ expresion SEMICOLON .

    FUNCTION        reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    LET             reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    VAR             reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    CONST           reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    CONSOLE         reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    IF              reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    FOR             reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    ID              reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    WHILE           reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    $end            reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)
    RBRACE          reduce using rule 70 (unario -> ID TIMESEQ expresion SEMICOLON .)


state 89

    (71) unario -> ID DIVEQ expresion SEMICOLON .

    FUNCTION        reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    LET             reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    VAR             reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    CONST           reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    CONSOLE         reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    IF              reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    FOR             reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    ID              reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    WHILE           reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    $end            reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)
    RBRACE          reduce using rule 71 (unario -> ID DIVEQ expresion SEMICOLON .)


state 90

    (72) unario -> ID POWEQ expresion SEMICOLON .

    FUNCTION        reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    LET             reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    VAR             reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    CONST           reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    CONSOLE         reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    IF              reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    FOR             reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    ID              reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    WHILE           reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    $end            reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)
    RBRACE          reduce using rule 72 (unario -> ID POWEQ expresion SEMICOLON .)


state 91

    (105) llamada_funcion -> ID LPAREN argumentos RPAREN .

    FUNCTION        reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    LET             reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    VAR             reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    CONST           reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    CONSOLE         reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    IF              reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    FOR             reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    ID              reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    WHILE           reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    $end            reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    SEMICOLON       reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    OPERADOR        reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    RBRACE          reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    RPAREN          reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    COMMA           reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    EQUAL           reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    LESS            reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    GREATER         reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    LESSEQUAL       reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    GREATEQUAL      reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    NOTEQUAL        reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    RBRACKET        reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    OR              reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)
    AND             reduce using rule 105 (llamada_funcion -> ID LPAREN argumentos RPAREN .)


state 92

    (107) argumentos -> argumentos COMMA . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 125
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 93

    (42) variables_assign -> variables_assign COMMA ID . ASSIGN expresion
    (43) variables_assign -> variables_assign COMMA ID .

    ASSIGN          shift and go to state 126
    SEMICOLON       reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    COMMA           reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    FUNCTION        reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    LET             reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    VAR             reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    CONST           reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    CONSOLE         reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    IF              reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    FOR             reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    ID              reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    WHILE           reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    $end            reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)
    RBRACE          reduce using rule 43 (variables_assign -> variables_assign COMMA ID .)


state 94

    (17) asignacion -> LET ID ASSIGN expresion . SEMICOLON
    (26) asignacion_sin_semicolon -> LET ID ASSIGN expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 127
    FUNCTION        reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    LET             reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    VAR             reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    CONST           reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    CONSOLE         reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    IF              reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    FOR             reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    ID              reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    WHILE           reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    $end            reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    RBRACE          reduce using rule 26 (asignacion_sin_semicolon -> LET ID ASSIGN expresion .)
    OPERADOR        shift and go to state 85


state 95

    (20) asignacion -> LET ID ASSIGN expresion_array . SEMICOLON
    (29) asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .

    SEMICOLON       shift and go to state 128
    FUNCTION        reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    LET             reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    VAR             reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    CONST           reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    CONSOLE         reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    IF              reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    FOR             reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    ID              reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    WHILE           reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    $end            reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)
    RBRACE          reduce using rule 29 (asignacion_sin_semicolon -> LET ID ASSIGN expresion_array .)


state 96

    (23) asignacion -> LET ID ASSIGN objeto_array . SEMICOLON
    (32) asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .

    SEMICOLON       shift and go to state 129
    FUNCTION        reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    LET             reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    VAR             reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    CONST           reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    CONSOLE         reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    IF              reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    FOR             reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    ID              reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    WHILE           reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    $end            reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)
    RBRACE          reduce using rule 32 (asignacion_sin_semicolon -> LET ID ASSIGN objeto_array .)


state 97

    (48) expresion_array -> LBRACKET . RBRACKET
    (49) expresion_array -> LBRACKET . elementos RBRACKET
    (55) objeto_array -> LBRACKET . LBRACE RBRACE RBRACKET
    (56) objeto_array -> LBRACKET . objetos RBRACKET
    (50) elementos -> . expresion
    (51) elementos -> . elementos COMMA expresion
    (57) objetos -> . objeto
    (58) objetos -> . objetos COMMA objeto
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (59) objeto -> . LBRACE propiedades RBRACE
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACKET        shift and go to state 130
    LBRACE          shift and go to state 132
    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    elementos                      shift and go to state 131
    objetos                        shift and go to state 133
    expresion                      shift and go to state 134
    objeto                         shift and go to state 135
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 98

    (18) asignacion -> VAR ID ASSIGN expresion . SEMICOLON
    (27) asignacion_sin_semicolon -> VAR ID ASSIGN expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 136
    FUNCTION        reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    LET             reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    VAR             reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    CONST           reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    CONSOLE         reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    IF              reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    FOR             reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    ID              reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    WHILE           reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    $end            reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    RBRACE          reduce using rule 27 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion .)
    OPERADOR        shift and go to state 85


state 99

    (22) asignacion -> VAR ID ASSIGN expresion_array . SEMICOLON
    (31) asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .

    SEMICOLON       shift and go to state 137
    FUNCTION        reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    LET             reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    VAR             reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    CONST           reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    CONSOLE         reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    IF              reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    FOR             reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    ID              reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    WHILE           reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    $end            reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)
    RBRACE          reduce using rule 31 (asignacion_sin_semicolon -> VAR ID ASSIGN expresion_array .)


state 100

    (25) asignacion -> VAR ID ASSIGN objeto_array . SEMICOLON
    (34) asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .

    SEMICOLON       shift and go to state 138
    FUNCTION        reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    LET             reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    VAR             reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    CONST           reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    CONSOLE         reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    IF              reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    FOR             reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    ID              reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    WHILE           reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    $end            reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)
    RBRACE          reduce using rule 34 (asignacion_sin_semicolon -> VAR ID ASSIGN objeto_array .)


state 101

    (19) asignacion -> CONST ID ASSIGN expresion . SEMICOLON
    (28) asignacion_sin_semicolon -> CONST ID ASSIGN expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 139
    FUNCTION        reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    LET             reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    VAR             reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    CONST           reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    CONSOLE         reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    IF              reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    FOR             reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    ID              reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    WHILE           reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    $end            reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    RBRACE          reduce using rule 28 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion .)
    OPERADOR        shift and go to state 85


state 102

    (21) asignacion -> CONST ID ASSIGN expresion_array . SEMICOLON
    (30) asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .

    SEMICOLON       shift and go to state 140
    FUNCTION        reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    LET             reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    VAR             reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    CONST           reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    CONSOLE         reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    IF              reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    FOR             reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    ID              reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    WHILE           reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    $end            reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)
    RBRACE          reduce using rule 30 (asignacion_sin_semicolon -> CONST ID ASSIGN expresion_array .)


state 103

    (24) asignacion -> CONST ID ASSIGN objeto_array . SEMICOLON
    (33) asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .

    SEMICOLON       shift and go to state 141
    FUNCTION        reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    LET             reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    VAR             reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    CONST           reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    CONSOLE         reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    IF              reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    FOR             reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    ID              reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    WHILE           reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    $end            reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)
    RBRACE          reduce using rule 33 (asignacion_sin_semicolon -> CONST ID ASSIGN objeto_array .)


state 104

    (44) mostrar -> CONSOLE PUNTO LOG LPAREN . expresion RPAREN
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 142
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 105

    (84) condicional -> IF LPAREN comparacion RPAREN . LBRACE declaraciones RBRACE else_if_blocks else_block

    LBRACE          shift and go to state 143


state 106

    (96) comparacion -> comparacion OR . comparacion
    (90) comparacion -> . expresion EQUAL expresion
    (91) comparacion -> . expresion LESS expresion
    (92) comparacion -> . expresion GREATER expresion
    (93) comparacion -> . expresion LESSEQUAL expresion
    (94) comparacion -> . expresion GREATEQUAL expresion
    (95) comparacion -> . expresion NOTEQUAL expresion
    (96) comparacion -> . comparacion OR comparacion
    (97) comparacion -> . comparacion AND comparacion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    comparacion                    shift and go to state 144
    expresion                      shift and go to state 72
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 107

    (97) comparacion -> comparacion AND . comparacion
    (90) comparacion -> . expresion EQUAL expresion
    (91) comparacion -> . expresion LESS expresion
    (92) comparacion -> . expresion GREATER expresion
    (93) comparacion -> . expresion LESSEQUAL expresion
    (94) comparacion -> . expresion GREATEQUAL expresion
    (95) comparacion -> . expresion NOTEQUAL expresion
    (96) comparacion -> . comparacion OR comparacion
    (97) comparacion -> . comparacion AND comparacion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    comparacion                    shift and go to state 145
    expresion                      shift and go to state 72
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 108

    (90) comparacion -> expresion EQUAL . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 146
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 109

    (91) comparacion -> expresion LESS . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 147
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 110

    (92) comparacion -> expresion GREATER . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 148
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 111

    (93) comparacion -> expresion LESSEQUAL . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 149
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 112

    (94) comparacion -> expresion GREATEQUAL . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 150
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 113

    (95) comparacion -> expresion NOTEQUAL . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 151
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 114

    (98) bucle_for -> FOR LPAREN asignacion comparacion . SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (96) comparacion -> comparacion . OR comparacion
    (97) comparacion -> comparacion . AND comparacion

    SEMICOLON       shift and go to state 152
    OR              shift and go to state 106
    AND             shift and go to state 107


state 115

    (17) asignacion -> LET ID . ASSIGN expresion SEMICOLON
    (20) asignacion -> LET ID . ASSIGN expresion_array SEMICOLON
    (23) asignacion -> LET ID . ASSIGN objeto_array SEMICOLON

    ASSIGN          shift and go to state 153


state 116

    (18) asignacion -> VAR ID . ASSIGN expresion SEMICOLON
    (22) asignacion -> VAR ID . ASSIGN expresion_array SEMICOLON
    (25) asignacion -> VAR ID . ASSIGN objeto_array SEMICOLON

    ASSIGN          shift and go to state 154


state 117

    (19) asignacion -> CONST ID . ASSIGN expresion SEMICOLON
    (21) asignacion -> CONST ID . ASSIGN expresion_array SEMICOLON
    (24) asignacion -> CONST ID . ASSIGN objeto_array SEMICOLON

    ASSIGN          shift and go to state 155


state 118

    (99) bucle_while -> WHILE LPAREN comparacion RPAREN . LBRACE declaraciones RBRACE

    LBRACE          shift and go to state 156


state 119

    (100) funcion -> FUNCTION ID LPAREN parametros RPAREN . LBRACE declaraciones RBRACE

    LBRACE          shift and go to state 157


state 120

    (103) parametros -> parametros COMMA . parametro
    (104) parametro -> . ID

    ID              shift and go to state 78

    parametro                      shift and go to state 158

state 121

    (53) expresion -> ID LBRACKET ID . RBRACKET
    (64) expresion -> ID LBRACKET ID . RBRACKET PUNTO ID

    RBRACKET        shift and go to state 159


state 122

    (52) expresion -> ID LBRACKET NUM . RBRACKET
    (63) expresion -> ID LBRACKET NUM . RBRACKET PUNTO ID

    RBRACKET        shift and go to state 160


state 123

    (54) expresion -> ID PUNTO LENGTH .

    SEMICOLON       reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    OPERADOR        reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    FUNCTION        reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    LET             reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    VAR             reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    CONST           reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    CONSOLE         reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    IF              reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    FOR             reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    ID              reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    WHILE           reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    $end            reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    RBRACE          reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    RPAREN          reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    COMMA           reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    EQUAL           reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    LESS            reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    GREATER         reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    LESSEQUAL       reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    GREATEQUAL      reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    NOTEQUAL        reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    RBRACKET        reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    OR              reduce using rule 54 (expresion -> ID PUNTO LENGTH .)
    AND             reduce using rule 54 (expresion -> ID PUNTO LENGTH .)


state 124

    (81) expresion -> expresion OPERADOR expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    OPERADOR        reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    FUNCTION        reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    LET             reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    VAR             reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    CONST           reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    CONSOLE         reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    IF              reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    FOR             reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    ID              reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    WHILE           reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    $end            reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    RBRACE          reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    RPAREN          reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    COMMA           reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    EQUAL           reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    LESS            reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    GREATER         reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    LESSEQUAL       reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    GREATEQUAL      reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    NOTEQUAL        reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    RBRACKET        reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    OR              reduce using rule 81 (expresion -> expresion OPERADOR expresion .)
    AND             reduce using rule 81 (expresion -> expresion OPERADOR expresion .)

  ! OPERADOR        [ shift and go to state 85 ]


state 125

    (107) argumentos -> argumentos COMMA expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 107 (argumentos -> argumentos COMMA expresion .)
    COMMA           reduce using rule 107 (argumentos -> argumentos COMMA expresion .)
    OPERADOR        shift and go to state 85


state 126

    (42) variables_assign -> variables_assign COMMA ID ASSIGN . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 161
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 127

    (17) asignacion -> LET ID ASSIGN expresion SEMICOLON .

    FUNCTION        reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    LET             reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    VAR             reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    CONST           reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    CONSOLE         reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    IF              reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    FOR             reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    ID              reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    WHILE           reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    $end            reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    NUM             reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    STRING          reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 17 (asignacion -> LET ID ASSIGN expresion SEMICOLON .)


state 128

    (20) asignacion -> LET ID ASSIGN expresion_array SEMICOLON .

    FUNCTION        reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    LET             reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    VAR             reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    CONST           reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    CONSOLE         reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    IF              reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    FOR             reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    ID              reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    WHILE           reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    $end            reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    NUM             reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    STRING          reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)
    RBRACE          reduce using rule 20 (asignacion -> LET ID ASSIGN expresion_array SEMICOLON .)


state 129

    (23) asignacion -> LET ID ASSIGN objeto_array SEMICOLON .

    FUNCTION        reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    LET             reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    VAR             reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    CONST           reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    CONSOLE         reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    IF              reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    FOR             reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    ID              reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    WHILE           reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    $end            reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    NUM             reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    STRING          reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)
    RBRACE          reduce using rule 23 (asignacion -> LET ID ASSIGN objeto_array SEMICOLON .)


state 130

    (48) expresion_array -> LBRACKET RBRACKET .

    SEMICOLON       reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    LET             reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    VAR             reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    CONST           reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    CONSOLE         reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    IF              reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    FOR             reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    ID              reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    $end            reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)
    RBRACE          reduce using rule 48 (expresion_array -> LBRACKET RBRACKET .)


state 131

    (49) expresion_array -> LBRACKET elementos . RBRACKET
    (51) elementos -> elementos . COMMA expresion

    RBRACKET        shift and go to state 162
    COMMA           shift and go to state 163


state 132

    (55) objeto_array -> LBRACKET LBRACE . RBRACE RBRACKET
    (59) objeto -> LBRACE . propiedades RBRACE
    (60) propiedades -> . propiedad
    (61) propiedades -> . propiedades COMMA propiedad
    (62) propiedad -> . ID COLON valor

    RBRACE          shift and go to state 164
    ID              shift and go to state 167

    propiedades                    shift and go to state 165
    propiedad                      shift and go to state 166

state 133

    (56) objeto_array -> LBRACKET objetos . RBRACKET
    (58) objetos -> objetos . COMMA objeto

    RBRACKET        shift and go to state 168
    COMMA           shift and go to state 169


state 134

    (50) elementos -> expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RBRACKET        reduce using rule 50 (elementos -> expresion .)
    COMMA           reduce using rule 50 (elementos -> expresion .)
    OPERADOR        shift and go to state 85


state 135

    (57) objetos -> objeto .

    RBRACKET        reduce using rule 57 (objetos -> objeto .)
    COMMA           reduce using rule 57 (objetos -> objeto .)


state 136

    (18) asignacion -> VAR ID ASSIGN expresion SEMICOLON .

    FUNCTION        reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    LET             reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    VAR             reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    CONST           reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    CONSOLE         reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    IF              reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    FOR             reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    ID              reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    WHILE           reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    $end            reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    NUM             reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    STRING          reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 18 (asignacion -> VAR ID ASSIGN expresion SEMICOLON .)


state 137

    (22) asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .

    FUNCTION        reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    LET             reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    VAR             reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    CONST           reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    CONSOLE         reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    IF              reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    FOR             reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    ID              reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    WHILE           reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    $end            reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    NUM             reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    STRING          reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)
    RBRACE          reduce using rule 22 (asignacion -> VAR ID ASSIGN expresion_array SEMICOLON .)


state 138

    (25) asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .

    FUNCTION        reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    LET             reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    VAR             reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    CONST           reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    CONSOLE         reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    IF              reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    FOR             reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    ID              reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    WHILE           reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    $end            reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    NUM             reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    STRING          reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)
    RBRACE          reduce using rule 25 (asignacion -> VAR ID ASSIGN objeto_array SEMICOLON .)


state 139

    (19) asignacion -> CONST ID ASSIGN expresion SEMICOLON .

    FUNCTION        reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    LET             reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    VAR             reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    CONST           reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    CONSOLE         reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    IF              reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    FOR             reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    ID              reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    WHILE           reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    $end            reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    NUM             reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    STRING          reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)
    RBRACE          reduce using rule 19 (asignacion -> CONST ID ASSIGN expresion SEMICOLON .)


state 140

    (21) asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .

    FUNCTION        reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    LET             reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    VAR             reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    CONST           reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    CONSOLE         reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    IF              reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    FOR             reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    ID              reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    WHILE           reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    $end            reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    NUM             reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    STRING          reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)
    RBRACE          reduce using rule 21 (asignacion -> CONST ID ASSIGN expresion_array SEMICOLON .)


state 141

    (24) asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .

    FUNCTION        reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    LET             reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    VAR             reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    CONST           reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    CONSOLE         reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    IF              reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    FOR             reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    ID              reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    WHILE           reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    $end            reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    NUM             reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    STRING          reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)
    RBRACE          reduce using rule 24 (asignacion -> CONST ID ASSIGN objeto_array SEMICOLON .)


state 142

    (44) mostrar -> CONSOLE PUNTO LOG LPAREN expresion . RPAREN
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          shift and go to state 170
    OPERADOR        shift and go to state 85


state 143

    (84) condicional -> IF LPAREN comparacion RPAREN LBRACE . declaraciones RBRACE else_if_blocks else_block
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaraciones                  shift and go to state 171
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 144

    (96) comparacion -> comparacion OR comparacion .
    (96) comparacion -> comparacion . OR comparacion
    (97) comparacion -> comparacion . AND comparacion

    RPAREN          reduce using rule 96 (comparacion -> comparacion OR comparacion .)
    OR              reduce using rule 96 (comparacion -> comparacion OR comparacion .)
    SEMICOLON       reduce using rule 96 (comparacion -> comparacion OR comparacion .)
    AND             shift and go to state 107

  ! AND             [ reduce using rule 96 (comparacion -> comparacion OR comparacion .) ]
  ! OR              [ shift and go to state 106 ]


state 145

    (97) comparacion -> comparacion AND comparacion .
    (96) comparacion -> comparacion . OR comparacion
    (97) comparacion -> comparacion . AND comparacion

    RPAREN          reduce using rule 97 (comparacion -> comparacion AND comparacion .)
    OR              reduce using rule 97 (comparacion -> comparacion AND comparacion .)
    AND             reduce using rule 97 (comparacion -> comparacion AND comparacion .)
    SEMICOLON       reduce using rule 97 (comparacion -> comparacion AND comparacion .)

  ! OR              [ shift and go to state 106 ]
  ! AND             [ shift and go to state 107 ]


state 146

    (90) comparacion -> expresion EQUAL expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 90 (comparacion -> expresion EQUAL expresion .)
    OR              reduce using rule 90 (comparacion -> expresion EQUAL expresion .)
    AND             reduce using rule 90 (comparacion -> expresion EQUAL expresion .)
    SEMICOLON       reduce using rule 90 (comparacion -> expresion EQUAL expresion .)
    OPERADOR        shift and go to state 85


state 147

    (91) comparacion -> expresion LESS expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 91 (comparacion -> expresion LESS expresion .)
    OR              reduce using rule 91 (comparacion -> expresion LESS expresion .)
    AND             reduce using rule 91 (comparacion -> expresion LESS expresion .)
    SEMICOLON       reduce using rule 91 (comparacion -> expresion LESS expresion .)
    OPERADOR        shift and go to state 85


state 148

    (92) comparacion -> expresion GREATER expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 92 (comparacion -> expresion GREATER expresion .)
    OR              reduce using rule 92 (comparacion -> expresion GREATER expresion .)
    AND             reduce using rule 92 (comparacion -> expresion GREATER expresion .)
    SEMICOLON       reduce using rule 92 (comparacion -> expresion GREATER expresion .)
    OPERADOR        shift and go to state 85


state 149

    (93) comparacion -> expresion LESSEQUAL expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 93 (comparacion -> expresion LESSEQUAL expresion .)
    OR              reduce using rule 93 (comparacion -> expresion LESSEQUAL expresion .)
    AND             reduce using rule 93 (comparacion -> expresion LESSEQUAL expresion .)
    SEMICOLON       reduce using rule 93 (comparacion -> expresion LESSEQUAL expresion .)
    OPERADOR        shift and go to state 85


state 150

    (94) comparacion -> expresion GREATEQUAL expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 94 (comparacion -> expresion GREATEQUAL expresion .)
    OR              reduce using rule 94 (comparacion -> expresion GREATEQUAL expresion .)
    AND             reduce using rule 94 (comparacion -> expresion GREATEQUAL expresion .)
    SEMICOLON       reduce using rule 94 (comparacion -> expresion GREATEQUAL expresion .)
    OPERADOR        shift and go to state 85


state 151

    (95) comparacion -> expresion NOTEQUAL expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 95 (comparacion -> expresion NOTEQUAL expresion .)
    OR              reduce using rule 95 (comparacion -> expresion NOTEQUAL expresion .)
    AND             reduce using rule 95 (comparacion -> expresion NOTEQUAL expresion .)
    SEMICOLON       reduce using rule 95 (comparacion -> expresion NOTEQUAL expresion .)
    OPERADOR        shift and go to state 85


state 152

    (98) bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON . unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion

    ID              shift and go to state 173

    unario_sin_semicolon           shift and go to state 172

state 153

    (17) asignacion -> LET ID ASSIGN . expresion SEMICOLON
    (20) asignacion -> LET ID ASSIGN . expresion_array SEMICOLON
    (23) asignacion -> LET ID ASSIGN . objeto_array SEMICOLON
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (48) expresion_array -> . LBRACKET RBRACKET
    (49) expresion_array -> . LBRACKET elementos RBRACKET
    (55) objeto_array -> . LBRACKET LBRACE RBRACE RBRACKET
    (56) objeto_array -> . LBRACKET objetos RBRACKET
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    LBRACKET        shift and go to state 97
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 174
    expresion_array                shift and go to state 175
    objeto_array                   shift and go to state 176
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 154

    (18) asignacion -> VAR ID ASSIGN . expresion SEMICOLON
    (22) asignacion -> VAR ID ASSIGN . expresion_array SEMICOLON
    (25) asignacion -> VAR ID ASSIGN . objeto_array SEMICOLON
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (48) expresion_array -> . LBRACKET RBRACKET
    (49) expresion_array -> . LBRACKET elementos RBRACKET
    (55) objeto_array -> . LBRACKET LBRACE RBRACE RBRACKET
    (56) objeto_array -> . LBRACKET objetos RBRACKET
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    LBRACKET        shift and go to state 97
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 177
    expresion_array                shift and go to state 178
    objeto_array                   shift and go to state 179
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 155

    (19) asignacion -> CONST ID ASSIGN . expresion SEMICOLON
    (21) asignacion -> CONST ID ASSIGN . expresion_array SEMICOLON
    (24) asignacion -> CONST ID ASSIGN . objeto_array SEMICOLON
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (48) expresion_array -> . LBRACKET RBRACKET
    (49) expresion_array -> . LBRACKET elementos RBRACKET
    (55) objeto_array -> . LBRACKET LBRACE RBRACE RBRACKET
    (56) objeto_array -> . LBRACKET objetos RBRACKET
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    LBRACKET        shift and go to state 97
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 180
    expresion_array                shift and go to state 181
    objeto_array                   shift and go to state 182
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 156

    (99) bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE . declaraciones RBRACE
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaraciones                  shift and go to state 183
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 157

    (100) funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE . declaraciones RBRACE
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaraciones                  shift and go to state 184
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 158

    (103) parametros -> parametros COMMA parametro .

    RPAREN          reduce using rule 103 (parametros -> parametros COMMA parametro .)
    COMMA           reduce using rule 103 (parametros -> parametros COMMA parametro .)


state 159

    (53) expresion -> ID LBRACKET ID RBRACKET .
    (64) expresion -> ID LBRACKET ID RBRACKET . PUNTO ID

    SEMICOLON       reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    OPERADOR        reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    FUNCTION        reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    LET             reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    VAR             reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    CONST           reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    CONSOLE         reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    IF              reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    FOR             reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    ID              reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    WHILE           reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    $end            reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    RBRACE          reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    RPAREN          reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    COMMA           reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    EQUAL           reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    LESS            reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    GREATER         reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    LESSEQUAL       reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    GREATEQUAL      reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    NOTEQUAL        reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    RBRACKET        reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    OR              reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    AND             reduce using rule 53 (expresion -> ID LBRACKET ID RBRACKET .)
    PUNTO           shift and go to state 185


state 160

    (52) expresion -> ID LBRACKET NUM RBRACKET .
    (63) expresion -> ID LBRACKET NUM RBRACKET . PUNTO ID

    SEMICOLON       reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    OPERADOR        reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    FUNCTION        reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    LET             reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    VAR             reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    CONST           reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    CONSOLE         reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    IF              reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    FOR             reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    ID              reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    WHILE           reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    $end            reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    RBRACE          reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    RPAREN          reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    COMMA           reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    EQUAL           reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    LESS            reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    GREATER         reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    LESSEQUAL       reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    GREATEQUAL      reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    NOTEQUAL        reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    RBRACKET        reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    OR              reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    AND             reduce using rule 52 (expresion -> ID LBRACKET NUM RBRACKET .)
    PUNTO           shift and go to state 186


state 161

    (42) variables_assign -> variables_assign COMMA ID ASSIGN expresion .
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    COMMA           reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    FUNCTION        reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    LET             reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    VAR             reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    CONST           reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    CONSOLE         reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    IF              reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    FOR             reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    ID              reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    WHILE           reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    $end            reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    RBRACE          reduce using rule 42 (variables_assign -> variables_assign COMMA ID ASSIGN expresion .)
    OPERADOR        shift and go to state 85


state 162

    (49) expresion_array -> LBRACKET elementos RBRACKET .

    SEMICOLON       reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    FUNCTION        reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    LET             reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    VAR             reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    CONST           reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    CONSOLE         reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    IF              reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    FOR             reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    ID              reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    WHILE           reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    $end            reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)
    RBRACE          reduce using rule 49 (expresion_array -> LBRACKET elementos RBRACKET .)


state 163

    (51) elementos -> elementos COMMA . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 187
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 164

    (55) objeto_array -> LBRACKET LBRACE RBRACE . RBRACKET

    RBRACKET        shift and go to state 188


state 165

    (59) objeto -> LBRACE propiedades . RBRACE
    (61) propiedades -> propiedades . COMMA propiedad

    RBRACE          shift and go to state 189
    COMMA           shift and go to state 190


state 166

    (60) propiedades -> propiedad .

    RBRACE          reduce using rule 60 (propiedades -> propiedad .)
    COMMA           reduce using rule 60 (propiedades -> propiedad .)


state 167

    (62) propiedad -> ID . COLON valor

    COLON           shift and go to state 191


state 168

    (56) objeto_array -> LBRACKET objetos RBRACKET .

    SEMICOLON       reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    FUNCTION        reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    LET             reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    VAR             reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    CONST           reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    CONSOLE         reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    IF              reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    FOR             reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    ID              reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    WHILE           reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    $end            reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)
    RBRACE          reduce using rule 56 (objeto_array -> LBRACKET objetos RBRACKET .)


state 169

    (58) objetos -> objetos COMMA . objeto
    (59) objeto -> . LBRACE propiedades RBRACE

    LBRACE          shift and go to state 193

    objeto                         shift and go to state 192

state 170

    (44) mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .

    FUNCTION        reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    LET             reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    VAR             reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    CONST           reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    CONSOLE         reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    IF              reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    FOR             reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    ID              reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    WHILE           reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    $end            reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)
    RBRACE          reduce using rule 44 (mostrar -> CONSOLE PUNTO LOG LPAREN expresion RPAREN .)


state 171

    (84) condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones . RBRACE else_if_blocks else_block
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACE          shift and go to state 194
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 172

    (98) bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon . RPAREN LBRACE declaraciones RBRACE

    RPAREN          shift and go to state 195


state 173

    (73) unario_sin_semicolon -> ID . MINUSMINUS
    (74) unario_sin_semicolon -> ID . PLUSPLUS
    (75) unario_sin_semicolon -> ID . ASSIGN expresion
    (76) unario_sin_semicolon -> ID . PLUSEQ expresion
    (77) unario_sin_semicolon -> ID . MINUSEQ expresion
    (78) unario_sin_semicolon -> ID . TIMESEQ expresion
    (79) unario_sin_semicolon -> ID . DIVEQ expresion
    (80) unario_sin_semicolon -> ID . POWEQ expresion

    MINUSMINUS      shift and go to state 196
    PLUSPLUS        shift and go to state 197
    ASSIGN          shift and go to state 198
    PLUSEQ          shift and go to state 199
    MINUSEQ         shift and go to state 200
    TIMESEQ         shift and go to state 201
    DIVEQ           shift and go to state 202
    POWEQ           shift and go to state 203


state 174

    (17) asignacion -> LET ID ASSIGN expresion . SEMICOLON
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 127
    OPERADOR        shift and go to state 85


state 175

    (20) asignacion -> LET ID ASSIGN expresion_array . SEMICOLON

    SEMICOLON       shift and go to state 128


state 176

    (23) asignacion -> LET ID ASSIGN objeto_array . SEMICOLON

    SEMICOLON       shift and go to state 129


state 177

    (18) asignacion -> VAR ID ASSIGN expresion . SEMICOLON
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 136
    OPERADOR        shift and go to state 85


state 178

    (22) asignacion -> VAR ID ASSIGN expresion_array . SEMICOLON

    SEMICOLON       shift and go to state 137


state 179

    (25) asignacion -> VAR ID ASSIGN objeto_array . SEMICOLON

    SEMICOLON       shift and go to state 138


state 180

    (19) asignacion -> CONST ID ASSIGN expresion . SEMICOLON
    (81) expresion -> expresion . OPERADOR expresion

    SEMICOLON       shift and go to state 139
    OPERADOR        shift and go to state 85


state 181

    (21) asignacion -> CONST ID ASSIGN expresion_array . SEMICOLON

    SEMICOLON       shift and go to state 140


state 182

    (24) asignacion -> CONST ID ASSIGN objeto_array . SEMICOLON

    SEMICOLON       shift and go to state 141


state 183

    (99) bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones . RBRACE
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACE          shift and go to state 204
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 184

    (100) funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones . RBRACE
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACE          shift and go to state 205
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 185

    (64) expresion -> ID LBRACKET ID RBRACKET PUNTO . ID

    ID              shift and go to state 206


state 186

    (63) expresion -> ID LBRACKET NUM RBRACKET PUNTO . ID

    ID              shift and go to state 207


state 187

    (51) elementos -> elementos COMMA expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RBRACKET        reduce using rule 51 (elementos -> elementos COMMA expresion .)
    COMMA           reduce using rule 51 (elementos -> elementos COMMA expresion .)
    OPERADOR        shift and go to state 85


state 188

    (55) objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .

    SEMICOLON       reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    FUNCTION        reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    LET             reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    VAR             reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    CONST           reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    CONSOLE         reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    IF              reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    FOR             reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    ID              reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    WHILE           reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    $end            reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)
    RBRACE          reduce using rule 55 (objeto_array -> LBRACKET LBRACE RBRACE RBRACKET .)


state 189

    (59) objeto -> LBRACE propiedades RBRACE .

    RBRACKET        reduce using rule 59 (objeto -> LBRACE propiedades RBRACE .)
    COMMA           reduce using rule 59 (objeto -> LBRACE propiedades RBRACE .)


state 190

    (61) propiedades -> propiedades COMMA . propiedad
    (62) propiedad -> . ID COLON valor

    ID              shift and go to state 167

    propiedad                      shift and go to state 208

state 191

    (62) propiedad -> ID COLON . valor
    (82) valor -> . NUM
    (83) valor -> . STRING

    NUM             shift and go to state 54
    STRING          shift and go to state 55

    valor                          shift and go to state 209

state 192

    (58) objetos -> objetos COMMA objeto .

    RBRACKET        reduce using rule 58 (objetos -> objetos COMMA objeto .)
    COMMA           reduce using rule 58 (objetos -> objetos COMMA objeto .)


state 193

    (59) objeto -> LBRACE . propiedades RBRACE
    (60) propiedades -> . propiedad
    (61) propiedades -> . propiedades COMMA propiedad
    (62) propiedad -> . ID COLON valor

    ID              shift and go to state 167

    propiedades                    shift and go to state 165
    propiedad                      shift and go to state 166

state 194

    (84) condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE . else_if_blocks else_block
    (87) else_if_blocks -> . empty
    (88) else_if_blocks -> . else_if_blocks else_if_block
    (108) empty -> .

    ELSE            reduce using rule 108 (empty -> .)
    FUNCTION        reduce using rule 108 (empty -> .)
    LET             reduce using rule 108 (empty -> .)
    VAR             reduce using rule 108 (empty -> .)
    CONST           reduce using rule 108 (empty -> .)
    CONSOLE         reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    FOR             reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    $end            reduce using rule 108 (empty -> .)
    RBRACE          reduce using rule 108 (empty -> .)

    else_if_blocks                 shift and go to state 210
    empty                          shift and go to state 211

state 195

    (98) bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN . LBRACE declaraciones RBRACE

    LBRACE          shift and go to state 212


state 196

    (73) unario_sin_semicolon -> ID MINUSMINUS .

    RPAREN          reduce using rule 73 (unario_sin_semicolon -> ID MINUSMINUS .)


state 197

    (74) unario_sin_semicolon -> ID PLUSPLUS .

    RPAREN          reduce using rule 74 (unario_sin_semicolon -> ID PLUSPLUS .)


state 198

    (75) unario_sin_semicolon -> ID ASSIGN . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 213
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 199

    (76) unario_sin_semicolon -> ID PLUSEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 214
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 200

    (77) unario_sin_semicolon -> ID MINUSEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 215
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 201

    (78) unario_sin_semicolon -> ID TIMESEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 216
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 202

    (79) unario_sin_semicolon -> ID DIVEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 217
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 203

    (80) unario_sin_semicolon -> ID POWEQ . expresion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    expresion                      shift and go to state 218
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 204

    (99) bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .

    FUNCTION        reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    LET             reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    VAR             reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    CONST           reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    CONSOLE         reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    IF              reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    FOR             reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    ID              reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    WHILE           reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    $end            reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    RBRACE          reduce using rule 99 (bucle_while -> WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)


state 205

    (100) funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .

    FUNCTION        reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    LET             reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    VAR             reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    CONST           reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    CONSOLE         reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    IF              reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    FOR             reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    ID              reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    WHILE           reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    $end            reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)
    RBRACE          reduce using rule 100 (funcion -> FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE .)


state 206

    (64) expresion -> ID LBRACKET ID RBRACKET PUNTO ID .

    SEMICOLON       reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    OPERADOR        reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    FUNCTION        reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    LET             reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    VAR             reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    CONST           reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    CONSOLE         reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    IF              reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    FOR             reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    ID              reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    WHILE           reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    $end            reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    RBRACE          reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    RPAREN          reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    COMMA           reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    EQUAL           reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    LESS            reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    GREATER         reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    LESSEQUAL       reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    GREATEQUAL      reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    NOTEQUAL        reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    RBRACKET        reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    OR              reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)
    AND             reduce using rule 64 (expresion -> ID LBRACKET ID RBRACKET PUNTO ID .)


state 207

    (63) expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .

    SEMICOLON       reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    OPERADOR        reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    FUNCTION        reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    LET             reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    VAR             reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    CONST           reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    CONSOLE         reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    IF              reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    FOR             reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    ID              reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    WHILE           reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    $end            reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    RBRACE          reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    RPAREN          reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    COMMA           reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    EQUAL           reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    LESS            reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    GREATER         reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    LESSEQUAL       reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    GREATEQUAL      reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    NOTEQUAL        reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    RBRACKET        reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    OR              reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)
    AND             reduce using rule 63 (expresion -> ID LBRACKET NUM RBRACKET PUNTO ID .)


state 208

    (61) propiedades -> propiedades COMMA propiedad .

    RBRACE          reduce using rule 61 (propiedades -> propiedades COMMA propiedad .)
    COMMA           reduce using rule 61 (propiedades -> propiedades COMMA propiedad .)


state 209

    (62) propiedad -> ID COLON valor .

    RBRACE          reduce using rule 62 (propiedad -> ID COLON valor .)
    COMMA           reduce using rule 62 (propiedad -> ID COLON valor .)


state 210

    (84) condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks . else_block
    (88) else_if_blocks -> else_if_blocks . else_if_block
    (85) else_block -> . ELSE LBRACE declaraciones RBRACE
    (86) else_block -> . empty
    (89) else_if_block -> . ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (108) empty -> .

    ELSE            shift and go to state 221
    FUNCTION        reduce using rule 108 (empty -> .)
    LET             reduce using rule 108 (empty -> .)
    VAR             reduce using rule 108 (empty -> .)
    CONST           reduce using rule 108 (empty -> .)
    CONSOLE         reduce using rule 108 (empty -> .)
    IF              reduce using rule 108 (empty -> .)
    FOR             reduce using rule 108 (empty -> .)
    ID              reduce using rule 108 (empty -> .)
    WHILE           reduce using rule 108 (empty -> .)
    $end            reduce using rule 108 (empty -> .)
    RBRACE          reduce using rule 108 (empty -> .)

    else_block                     shift and go to state 219
    else_if_block                  shift and go to state 220
    empty                          shift and go to state 222

state 211

    (87) else_if_blocks -> empty .

    ELSE            reduce using rule 87 (else_if_blocks -> empty .)
    FUNCTION        reduce using rule 87 (else_if_blocks -> empty .)
    LET             reduce using rule 87 (else_if_blocks -> empty .)
    VAR             reduce using rule 87 (else_if_blocks -> empty .)
    CONST           reduce using rule 87 (else_if_blocks -> empty .)
    CONSOLE         reduce using rule 87 (else_if_blocks -> empty .)
    IF              reduce using rule 87 (else_if_blocks -> empty .)
    FOR             reduce using rule 87 (else_if_blocks -> empty .)
    ID              reduce using rule 87 (else_if_blocks -> empty .)
    WHILE           reduce using rule 87 (else_if_blocks -> empty .)
    $end            reduce using rule 87 (else_if_blocks -> empty .)
    RBRACE          reduce using rule 87 (else_if_blocks -> empty .)


state 212

    (98) bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE . declaraciones RBRACE
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    asignacion                     shift and go to state 8
    unario_sin_semicolon           shift and go to state 14
    declaraciones                  shift and go to state 223
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 213

    (75) unario_sin_semicolon -> ID ASSIGN expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 75 (unario_sin_semicolon -> ID ASSIGN expresion .)
    OPERADOR        shift and go to state 85


state 214

    (76) unario_sin_semicolon -> ID PLUSEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 76 (unario_sin_semicolon -> ID PLUSEQ expresion .)
    OPERADOR        shift and go to state 85


state 215

    (77) unario_sin_semicolon -> ID MINUSEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 77 (unario_sin_semicolon -> ID MINUSEQ expresion .)
    OPERADOR        shift and go to state 85


state 216

    (78) unario_sin_semicolon -> ID TIMESEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 78 (unario_sin_semicolon -> ID TIMESEQ expresion .)
    OPERADOR        shift and go to state 85


state 217

    (79) unario_sin_semicolon -> ID DIVEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 79 (unario_sin_semicolon -> ID DIVEQ expresion .)
    OPERADOR        shift and go to state 85


state 218

    (80) unario_sin_semicolon -> ID POWEQ expresion .
    (81) expresion -> expresion . OPERADOR expresion

    RPAREN          reduce using rule 80 (unario_sin_semicolon -> ID POWEQ expresion .)
    OPERADOR        shift and go to state 85


state 219

    (84) condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .

    FUNCTION        reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    LET             reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    VAR             reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    CONST           reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    CONSOLE         reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    IF              reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    FOR             reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    ID              reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    WHILE           reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    $end            reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)
    RBRACE          reduce using rule 84 (condicional -> IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block .)


state 220

    (88) else_if_blocks -> else_if_blocks else_if_block .

    ELSE            reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    FUNCTION        reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    LET             reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    VAR             reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    CONST           reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    CONSOLE         reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    IF              reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    FOR             reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    ID              reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    WHILE           reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    $end            reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)
    RBRACE          reduce using rule 88 (else_if_blocks -> else_if_blocks else_if_block .)


state 221

    (85) else_block -> ELSE . LBRACE declaraciones RBRACE
    (89) else_if_block -> ELSE . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE

    LBRACE          shift and go to state 224
    IF              shift and go to state 225


state 222

    (86) else_block -> empty .

    FUNCTION        reduce using rule 86 (else_block -> empty .)
    LET             reduce using rule 86 (else_block -> empty .)
    VAR             reduce using rule 86 (else_block -> empty .)
    CONST           reduce using rule 86 (else_block -> empty .)
    CONSOLE         reduce using rule 86 (else_block -> empty .)
    IF              reduce using rule 86 (else_block -> empty .)
    FOR             reduce using rule 86 (else_block -> empty .)
    ID              reduce using rule 86 (else_block -> empty .)
    WHILE           reduce using rule 86 (else_block -> empty .)
    $end            reduce using rule 86 (else_block -> empty .)
    RBRACE          reduce using rule 86 (else_block -> empty .)


state 223

    (98) bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones . RBRACE
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACE          shift and go to state 226
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    asignacion                     shift and go to state 8
    unario_sin_semicolon           shift and go to state 14
    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 224

    (85) else_block -> ELSE LBRACE . declaraciones RBRACE
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaraciones                  shift and go to state 227
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 225

    (89) else_if_block -> ELSE IF . LPAREN comparacion RPAREN LBRACE declaraciones RBRACE

    LPAREN          shift and go to state 228


state 226

    (98) bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .

    FUNCTION        reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    LET             reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    VAR             reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    CONST           reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    CONSOLE         reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    IF              reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    FOR             reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    ID              reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    WHILE           reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    $end            reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)
    RBRACE          reduce using rule 98 (bucle_for -> FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE .)


state 227

    (85) else_block -> ELSE LBRACE declaraciones . RBRACE
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACE          shift and go to state 229
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 228

    (89) else_if_block -> ELSE IF LPAREN . comparacion RPAREN LBRACE declaraciones RBRACE
    (90) comparacion -> . expresion EQUAL expresion
    (91) comparacion -> . expresion LESS expresion
    (92) comparacion -> . expresion GREATER expresion
    (93) comparacion -> . expresion LESSEQUAL expresion
    (94) comparacion -> . expresion GREATEQUAL expresion
    (95) comparacion -> . expresion NOTEQUAL expresion
    (96) comparacion -> . comparacion OR comparacion
    (97) comparacion -> . comparacion AND comparacion
    (45) expresion -> . valor
    (46) expresion -> . ID
    (47) expresion -> . llamada_funcion
    (52) expresion -> . ID LBRACKET NUM RBRACKET
    (53) expresion -> . ID LBRACKET ID RBRACKET
    (54) expresion -> . ID PUNTO LENGTH
    (63) expresion -> . ID LBRACKET NUM RBRACKET PUNTO ID
    (64) expresion -> . ID LBRACKET ID RBRACKET PUNTO ID
    (81) expresion -> . expresion OPERADOR expresion
    (82) valor -> . NUM
    (83) valor -> . STRING
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    ID              shift and go to state 50
    NUM             shift and go to state 54
    STRING          shift and go to state 55

    comparacion                    shift and go to state 230
    expresion                      shift and go to state 72
    valor                          shift and go to state 52
    llamada_funcion                shift and go to state 53

state 229

    (85) else_block -> ELSE LBRACE declaraciones RBRACE .

    FUNCTION        reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    LET             reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    VAR             reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    CONST           reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    CONSOLE         reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    IF              reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    FOR             reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    ID              reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    WHILE           reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    $end            reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)
    RBRACE          reduce using rule 85 (else_block -> ELSE LBRACE declaraciones RBRACE .)


state 230

    (89) else_if_block -> ELSE IF LPAREN comparacion . RPAREN LBRACE declaraciones RBRACE
    (96) comparacion -> comparacion . OR comparacion
    (97) comparacion -> comparacion . AND comparacion

    RPAREN          shift and go to state 231
    OR              shift and go to state 106
    AND             shift and go to state 107


state 231

    (89) else_if_block -> ELSE IF LPAREN comparacion RPAREN . LBRACE declaraciones RBRACE

    LBRACE          shift and go to state 232


state 232

    (89) else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE . declaraciones RBRACE
    (3) declaraciones -> . declaraciones declaracion
    (4) declaraciones -> . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaraciones                  shift and go to state 233
    declaracion                    shift and go to state 4
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 233

    (89) else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones . RBRACE
    (3) declaraciones -> declaraciones . declaracion
    (5) declaracion -> . funcion
    (6) declaracion -> . asignacion_multiple
    (7) declaracion -> . asignacion_multiple_sin_semicolon
    (8) declaracion -> . asignacion
    (9) declaracion -> . asignacion_sin_semicolon
    (10) declaracion -> . mostrar
    (11) declaracion -> . condicional
    (12) declaracion -> . bucle_for
    (13) declaracion -> . unario
    (14) declaracion -> . unario_sin_semicolon
    (15) declaracion -> . bucle_while
    (16) declaracion -> . llamada_funcion
    (100) funcion -> . FUNCTION ID LPAREN parametros RPAREN LBRACE declaraciones RBRACE
    (35) asignacion_multiple -> . LET variables_assign SEMICOLON
    (36) asignacion_multiple -> . VAR variables_assign SEMICOLON
    (37) asignacion_multiple -> . CONST variables_assign SEMICOLON
    (38) asignacion_multiple_sin_semicolon -> . LET variables_assign
    (39) asignacion_multiple_sin_semicolon -> . VAR variables_assign
    (40) asignacion_multiple_sin_semicolon -> . CONST variables_assign
    (17) asignacion -> . LET ID ASSIGN expresion SEMICOLON
    (18) asignacion -> . VAR ID ASSIGN expresion SEMICOLON
    (19) asignacion -> . CONST ID ASSIGN expresion SEMICOLON
    (20) asignacion -> . LET ID ASSIGN expresion_array SEMICOLON
    (21) asignacion -> . CONST ID ASSIGN expresion_array SEMICOLON
    (22) asignacion -> . VAR ID ASSIGN expresion_array SEMICOLON
    (23) asignacion -> . LET ID ASSIGN objeto_array SEMICOLON
    (24) asignacion -> . CONST ID ASSIGN objeto_array SEMICOLON
    (25) asignacion -> . VAR ID ASSIGN objeto_array SEMICOLON
    (26) asignacion_sin_semicolon -> . LET ID ASSIGN expresion
    (27) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion
    (28) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion
    (29) asignacion_sin_semicolon -> . LET ID ASSIGN expresion_array
    (30) asignacion_sin_semicolon -> . CONST ID ASSIGN expresion_array
    (31) asignacion_sin_semicolon -> . VAR ID ASSIGN expresion_array
    (32) asignacion_sin_semicolon -> . LET ID ASSIGN objeto_array
    (33) asignacion_sin_semicolon -> . CONST ID ASSIGN objeto_array
    (34) asignacion_sin_semicolon -> . VAR ID ASSIGN objeto_array
    (44) mostrar -> . CONSOLE PUNTO LOG LPAREN expresion RPAREN
    (84) condicional -> . IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE else_if_blocks else_block
    (98) bucle_for -> . FOR LPAREN asignacion comparacion SEMICOLON unario_sin_semicolon RPAREN LBRACE declaraciones RBRACE
    (65) unario -> . ID MINUSMINUS SEMICOLON
    (66) unario -> . ID PLUSPLUS SEMICOLON
    (67) unario -> . ID ASSIGN expresion SEMICOLON
    (68) unario -> . ID PLUSEQ expresion SEMICOLON
    (69) unario -> . ID MINUSEQ expresion SEMICOLON
    (70) unario -> . ID TIMESEQ expresion SEMICOLON
    (71) unario -> . ID DIVEQ expresion SEMICOLON
    (72) unario -> . ID POWEQ expresion SEMICOLON
    (73) unario_sin_semicolon -> . ID MINUSMINUS
    (74) unario_sin_semicolon -> . ID PLUSPLUS
    (75) unario_sin_semicolon -> . ID ASSIGN expresion
    (76) unario_sin_semicolon -> . ID PLUSEQ expresion
    (77) unario_sin_semicolon -> . ID MINUSEQ expresion
    (78) unario_sin_semicolon -> . ID TIMESEQ expresion
    (79) unario_sin_semicolon -> . ID DIVEQ expresion
    (80) unario_sin_semicolon -> . ID POWEQ expresion
    (99) bucle_while -> . WHILE LPAREN comparacion RPAREN LBRACE declaraciones RBRACE
    (105) llamada_funcion -> . ID LPAREN argumentos RPAREN

    RBRACE          shift and go to state 234
    FUNCTION        shift and go to state 17
    LET             shift and go to state 19
    VAR             shift and go to state 20
    CONST           shift and go to state 21
    CONSOLE         shift and go to state 22
    IF              shift and go to state 23
    FOR             shift and go to state 24
    ID              shift and go to state 18
    WHILE           shift and go to state 25

    declaracion                    shift and go to state 26
    funcion                        shift and go to state 5
    asignacion_multiple            shift and go to state 6
    asignacion_multiple_sin_semicolon shift and go to state 7
    asignacion                     shift and go to state 8
    asignacion_sin_semicolon       shift and go to state 9
    mostrar                        shift and go to state 10
    condicional                    shift and go to state 11
    bucle_for                      shift and go to state 12
    unario                         shift and go to state 13
    unario_sin_semicolon           shift and go to state 14
    bucle_while                    shift and go to state 15
    llamada_funcion                shift and go to state 16

state 234

    (89) else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .

    ELSE            reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    FUNCTION        reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    LET             reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    VAR             reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    CONST           reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    CONSOLE         reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    IF              reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    FOR             reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    ID              reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    WHILE           reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    $end            reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)
    RBRACE          reduce using rule 89 (else_if_block -> ELSE IF LPAREN comparacion RPAREN LBRACE declaraciones RBRACE .)

